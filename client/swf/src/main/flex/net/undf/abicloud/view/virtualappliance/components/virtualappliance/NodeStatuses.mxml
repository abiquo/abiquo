<?xml version="1.0" encoding="utf-8"?>
<!--

     Abiquo community edition
     cloud management application for hybrid clouds
     Copyright (C) 2008-2010 - Abiquo Holdings S.L.

     This application is free software; you can redistribute it and/or
     modify it under the terms of the GNU LESSER GENERAL PUBLIC
     LICENSE as published by the Free Software Foundation under
     version 3 of the License

     This software is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     LESSER GENERAL PUBLIC LICENSE v.3 for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the
     Free Software Foundation, Inc., 59 Temple Place - Suite 330,
     Boston, MA 02111-1307, USA.

-->
<GeneralSubPanel 
	xmlns="net.undf.abicloud.view.general.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="100%">
	<mx:Script>
		<![CDATA[
			import net.undf.abicloud.vo.virtualappliance.VirtualAppliance;
			import net.undf.abicloud.vo.virtualappliance.Timestamp;
			import mx.collections.ArrayCollection;
			import net.undf.abicloud.vo.virtualappliance.Job;
			import net.undf.abicloud.vo.virtualappliance.Task;
			import net.undf.abicloud.model.AbiCloudModel;
			import mx.controls.dataGridClasses.DataGridColumn;
			import net.undf.abicloud.vo.virtualappliance.NodeVirtualImage;
			
			private var _virtualAppliance:VirtualAppliance;
			
			[Bindable]
			public function set virtualAppliance(value:VirtualAppliance):void
			{
				this._virtualAppliance = value;
			}
			
			private function returnName(object:NodeVirtualImage, column:DataGridColumn):String
            {
                return object.name;
            }
            
            private function returnStatus(object:NodeVirtualImage, column:DataGridColumn):String
            {
                if(!this._virtualAppliance)
                {
                    return '';  
                }
                /***
                * We return for each node the state and the description of the action perfomed
                * Check order:
                *   - if any task is retrieved -> Processing
                *   - if a task is retrieved:
                *       - if the Virtual Appliance have a timestamp:
                *           -  if the Virtual Appliance timestamp > Task timestamp -> Processing
                *           -  if the Virtual Appliance timestamp < Task timestamp -> *Check Flow* 
                *       - if the Virtual Appliance doesn't have timestamp -> *Check Flow*
                * 
                * *Check Flow*
                *   - if task FINISHED_SUCCESSFULLY -> task.type
                *   - if task FINISHED_UNSUCCESSFULLY o ABORTED -> task.state 
                *   - if a job as a different state that DONE and FAILED -> job.type + job.description
                *  
                * **/
                
                if(object.taskStatus.tasks.length == 0)
                {
                    return resourceManager.getString('VirtualAppliance','LABEL_PROCESSING');    
                }
                else
                {
                    var timestamp:Timestamp = AbiCloudModel.getInstance().virtualApplianceManager.isTimestampUsed('virtualAppliance',this._virtualAppliance.id);
                    var task:Task = object.taskStatus.tasks.getItemAt(0) as Task;
                    if(timestamp)
                    {
                       if(timestamp.timestamp > task.timestamp)
                       {
                           return resourceManager.getString('VirtualAppliance','LABEL_PROCESSING');
                       }    
                    }
                    
                    if(task.state == Task.FINISHED_SUCCESSFULLY)
                    {
                        return resourceManager.getString('VirtualAppliance','LABEL_TYPE_' + task.type);
                    }
                    else if(task.state == Task.FINISHED_UNSUCCESSFULLY || task.state == Task.ABORTED)
                    {
                        return resourceManager.getString('VirtualAppliance','LABEL_STATUS_' + task.state);
                    }
                    else
                    {
                        var job:Job = returnNodeState(task.jobs);
                        if(job)
                        {
                            return resourceManager.getString('VirtualAppliance','LABEL_STATUS_' + job.type);
                        }
                        return resourceManager.getString('VirtualAppliance','LABEL_FINISHING');
                    }
                    
                }
                return '';
            }
            
            private function returnNodeState(jobs:ArrayCollection):Job
            {
                var job:Job;
                for(var i:int = 0 ; i < jobs.length ; i++)
                {
                    job = jobs.getItemAt(i) as Job;
                    if(job.state != Job.DONE && job.state != Job.FAILED)
                    {
                        return job;
                    }   
                }
                return null;
            }
		]]>
	</mx:Script>
	<mx:DataGrid id="nodesList"
        width="100%" height="190">
        <mx:columns>
            <mx:DataGridColumn 
                headerText="Node"
                labelFunction="returnName"/>
             <mx:DataGridColumn 
                headerText="Status"
                width="150"
                labelFunction="returnStatus"/>
        </mx:columns>
    </mx:DataGrid>
</GeneralSubPanel>
