<?xml version="1.0" encoding="utf-8"?>
<!--

     Abiquo community edition
     cloud management application for hybrid clouds
     Copyright (C) 2008-2010 - Abiquo Holdings S.L.

     This application is free software; you can redistribute it and/or
     modify it under the terms of the GNU LESSER GENERAL PUBLIC
     LICENSE as published by the Free Software Foundation under
     version 3 of the License

     This software is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     LESSER GENERAL PUBLIC LICENSE v.3 for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the
     Free Software Foundation, Inc., 59 Temple Place - Suite 330,
     Boston, MA 02111-1307, USA.

-->

<AbiCloudPopUp 
    xmlns="net.undf.abicloud.view.general.*"
    xmlns:mx="http://www.adobe.com/2006/mxml"
    titleText="@Resource(bundle='VirtualImage', key='POPUP_TITLE_ICON_ADD')"
    xmlns:utils="net.undf.abicloud.utils.*">

    <mx:Script>
        <![CDATA[
            import mx.utils.ObjectUtil;

            import net.undf.abicloud.business.managers.virtualimage.VirtualImageManager;
            import net.undf.abicloud.events.virtualimage.VirtualImageEvent;
            import net.undf.abicloud.model.AbiCloudModel;
            import net.undf.abicloud.vo.virtualimage.Icon;

            private var _iconValid:Boolean;

            private var _icon:Icon;

            /**
             * Initializes this component to create or edit an Icon
             **/
            public function init(icon:Icon = null):void
            {
                this._icon = icon;

                if (this._icon == null)
                {
                    //Create a new icon
                    nameInput.text = "";
                    urlInput.text = "";
                    iconImage.load(VirtualImageManager.DEFAULT_ICON_IMAGE_PATH);
                    acceptButton.enabled = false;
                }
                else
                {
                    //Edit an existing icon
                    nameInput.text = this._icon.name;
                    urlInput.text = this._icon.path;
                    iconImage.load(this._icon.path);
                    acceptButton.enabled = true;
                }

                nameInput.setFocus();
            }

            private function onClickValidateIcon():void
            {
                iconImage.load(urlInput.text);
            }

            /**
             * When user clicks Accept button, we save the new icon or the edited icon
             **/
            private function onAccept():void
            {
                var virtualImageEvent:VirtualImageEvent;

                if (this._icon == null)
                {
                    //Creating the new icon
                    this._icon = new Icon();
                    this._icon.name = nameInput.text;
                    this._icon.path = urlInput.text;

                    //Announcing that user wants to create a new icon
                    virtualImageEvent = new VirtualImageEvent(VirtualImageEvent.CREATE_ICON);
                    virtualImageEvent.enterprise = AbiCloudModel.getInstance().loginManager.user.enterprise;
                    virtualImageEvent.icon = this._icon;
                }
                else
                {
                    //Editing the icon, without modifying the original one until
                    //changes are saved in server
                    var iconEdited:Icon = ObjectUtil.copy(this._icon) as Icon;
                    iconEdited.name = nameInput.text;
                    iconEdited.path = urlInput.text;

                    //Announcing that user wants to edit an icon
                    virtualImageEvent = new VirtualImageEvent(VirtualImageEvent.EDIT_ICON);
                    virtualImageEvent.icon = iconEdited;
                }

                dispatchEvent(virtualImageEvent);

                //Closing the form
                close();
            }

            /**
             * Cancels Repository creation
             **/
            private function close():void
            {
                //Closing the form
                dispatchEvent(new Event("IconFormClose"));
            }

            /**
             * Activates the Accept Button if the form is valid
             **/
            private function validateForm():void
            {
                if (nameInput.text.length > 0 && iconImage.loadSuccess)
                    acceptButton.enabled = true;

                else
                    acceptButton.enabled = false;
            }

            /**
             * Basic behaivour is as follows:
             * If user presses the Enter, in any part of this Pop Up (except buttons), it would be
             * like Accept Button has been pressed
             */
            override protected function keyboardHandler(keyboardEvent:KeyboardEvent):void
            {
                if (keyboardEvent.target == acceptButton || keyboardEvent.target == cancelButton)
                    super.keyboardHandler(keyboardEvent);
                else
                {
                    if (keyboardEvent.keyCode == 13 && acceptButton.enabled)
                        onAccept();
                }
            }
        ]]>
    </mx:Script>

    <mx:Form paddingTop="3">
        <mx:FormItem 
            label="@Resource(bundle='Common', key='TEXTINPUT_LABEL_NAME')"
            required="true">
            <mx:TextInput id="nameInput"
                height="20"
                maxChars="20"
                change="validateForm()"/>
        </mx:FormItem>

        <mx:FormItem 
            label="@Resource(bundle='VirtualImage', key='TEXTINPUT_LABEL_URL')"
            direction="horizontal"
            required="true">
            <mx:VBox>
                <mx:TextArea id="urlInput"
                    maxChars="199"/>

                <mx:Button id="validateButton"
                    height="18"
                    label="@Resource(bundle='Common', key='BUTTON_VALIDATE')"
                    click="onClickValidateIcon()"/>

                <mx:Label id="imageLoadErrorLabel"
                    color="#EE0000"
                    text="@Resource(bundle='VirtualImage', key='IMAGE_LOAD_ERROR_LABEL')"
                    includeInLayout="{! iconImage.loadSuccess}"
                    visible="{! iconImage.loadSuccess}"/>
            </mx:VBox>

            <mx:Canvas 
                width="100" height="100"
				styleName="VirtualImageIconFormCanvas"
				>
                <utils:ImageDefault id="iconImage"
                    width="100%" height="100%"/>
            </mx:Canvas>

        </mx:FormItem>


        <mx:FormItem direction="horizontal">
            <mx:Button id="acceptButton"
                height="18"
                label="@Resource(bundle='Common', key='BUTTON_ACCEPT')"
                click="onAccept()"/>

            <mx:Button id="cancelButton"
                height="18"
                label="@Resource(bundle='Common', key='BUTTON_CANCEL')"
                styleName="AlternativeButton"
                click="close()"/>
        </mx:FormItem>
    </mx:Form>

</AbiCloudPopUp>
