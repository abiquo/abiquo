<?xml version="1.0" encoding="utf-8"?>
<!--

     Abiquo community edition
     cloud management application for hybrid clouds
     Copyright (C) 2008-2010 - Abiquo Holdings S.L.

     This application is free software; you can redistribute it and/or
     modify it under the terms of the GNU LESSER GENERAL PUBLIC
     LICENSE as published by the Free Software Foundation under
     version 3 of the License

     This software is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     LESSER GENERAL PUBLIC LICENSE v.3 for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the
     Free Software Foundation, Inc., 59 Temple Place - Suite 330,
     Boston, MA 02111-1307, USA.

-->

<general:AbiCloudPopUp 
    resizeEffect="{myResize}"
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:general="net.undf.abicloud.view.general.*"
    wikiUrl="{AbiCloudModel.getInstance().configurationManager.config.client_wiki_vm_createNetworkInterface.value}"
    titleText="@Resource(bundle='Networking', key='POPUP_TITLE_AVAILABLE_NIC_SELECTION')">

    <mx:Script>
        <![CDATA[
        	import net.undf.abicloud.vo.networking.VlanNetwork;
        	import net.undf.abicloud.vo.virtualappliance.VirtualAppliance;
        	import net.undf.abicloud.model.AbiCloudModel;
        	import net.undf.abicloud.vo.networking.IPPoolManagement;
        	import net.undf.abicloud.events.NetworkingEvent;
            import mx.containers.ViewStack;
            import mx.core.Container;
            import mx.events.TweenEvent;
            import mx.managers.PopUpManager;
            import mx.resources.ResourceManager;

            import net.undf.abicloud.view.networking.virtualmachine.privatenetwork.PrivateNICSelector;
            import net.undf.abicloud.vo.infrastructure.VirtualMachine;
            import net.undf.abicloud.vo.virtualappliance.VirtualDataCenter;

            [Bindable]
            public var privateNICSelector:PrivateNICSelector;

            [Bindable]
            protected var _virtualDatacenter:VirtualDataCenter;

            //The related VirtualAppliance
            protected var _virtualAppliance:VirtualAppliance;
            
            //The VirtualMachine to assign a new NIC
            protected var _virtualMachine:VirtualMachine;

            override protected function createChildren():void
            {
                super.createChildren();

                privateNICSelector = new PrivateNICSelector();
                privateNICSelector.addEventListener("onAssignNicToVirtualMachine",onAssignNicToVirtualMachine);
                privateNICSelector.addEventListener("onAssignExternalNicToVirtualMachine",onAssignExternalNicToVirtualMachine);
                privateNICSelector.addEventListener("close", onClose);

                toggledContainer.addContent(privateNICSelector, ResourceManager.getInstance().getString("Networking",
                                                                                                        "LABEL_PRIVATE_EXTERNAL"));
            }
            
            public function onAssignNicToVirtualMachine(evt:Event):void{
            	 //Assign the selected NIC to the Virtual Machine
               var event:NetworkingEvent = new NetworkingEvent(NetworkingEvent.ASSIGN_NIC_TO_VIRTUAL_MACHINE);
               event.virtualDatacenter = _virtualDatacenter;
               event.virtualAppliance = _virtualAppliance;
               event.ipPoolManagement = privateNICSelector.availableIPList.selectedItem as IPPoolManagement;
               event.virtualMachine = _virtualMachine;
               dispatchEvent(event);

               privateNICSelector.close();
            }
            
            public function onAssignExternalNicToVirtualMachine(evt:Event):void{
                 //Assign the selected NIC to the Virtual Machine
               var event:NetworkingEvent = new NetworkingEvent(NetworkingEvent.ASSIGN_EXTERNAL_NIC_TO_VIRTUAL_MACHINE);
               event.enterprise = AbiCloudModel.getInstance().loginManager.user.enterprise;
               event.virtualDatacenter = _virtualDatacenter;
               event.virtualAppliance = _virtualAppliance;
               if(!privateNICSelector.availableIPList.selectedItem){
               	    var ipPoolManagement:IPPoolManagement = new IPPoolManagement();
               	    ipPoolManagement.vlanNetworkId = VlanNetwork(privateNICSelector.vlanList.selectedItem).vlanNetworkId;
               	    event.ipPoolManagement = ipPoolManagement;
               }else{
	               event.ipPoolManagement = privateNICSelector.availableIPList.selectedItem as IPPoolManagement;
               }
               event.virtualMachine = _virtualMachine;
               dispatchEvent(event);

               privateNICSelector.close();
            }
            
            public function init(virtualDatacenter:VirtualDataCenter, virtualAppliance:VirtualAppliance, virtualMachine:VirtualMachine):void
            {
                toggledContainer.selectedIndex = 0;

                _virtualDatacenter = virtualDatacenter;
                _virtualAppliance = virtualAppliance;
                _virtualMachine = virtualMachine;

                privateNICSelector.init(_virtualDatacenter, _virtualMachine);
            }

            protected function onClose(event:Event):void
            {
                dispatchEvent(new Event("AvailableNICSelectorClose"));
            }

            /**
             * To hide contents when a resize effect starts. For performance purposes
             */
            private function onResizeEffectStart():void
            {
                toggledContainer.visible = false;
            }

            /**
             * While resizing, we keep the PopUp centered
             */
            private function onResizeEffectUpdate():void
            {
                PopUpManager.centerPopUp(this);
            }

            /**
             * To hide contents when a resize effect ends. For performance purposes
             */
            private function onResizeEffectEnd():void
            {
                toggledContainer.visible = true;
            }
        ]]>
    </mx:Script>

    <mx:Resize id="myResize"
        duration="800"
        heightTo="{toggledContainer.viewStack.selectedChild.explicitHeight}"
        widthTo="{toggledContainer.viewStack.selectedChild.explicitWidth}"
        tweenStart="onResizeEffectStart()"
        tweenUpdate="onResizeEffectUpdate()"
        tweenEnd="onResizeEffectEnd()"/>

    <general:GeneralToggledContainer id="toggledContainer"
        width="100%" height="100%"/>

    <mx:Spacer height="10"/>
</general:AbiCloudPopUp>
