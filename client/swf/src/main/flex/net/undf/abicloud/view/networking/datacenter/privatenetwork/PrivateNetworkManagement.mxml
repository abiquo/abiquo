<?xml version="1.0" encoding="utf-8"?>
<!--

     Abiquo community edition
     cloud management application for hybrid clouds
     Copyright (C) 2008-2010 - Abiquo Holdings S.L.

     This application is free software; you can redistribute it and/or
     modify it under the terms of the GNU LESSER GENERAL PUBLIC
     LICENSE as published by the Free Software Foundation under
     version 3 of the License

     This software is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     LESSER GENERAL PUBLIC LICENSE v.3 for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the
     Free Software Foundation, Inc., 59 Temple Place - Suite 330,
     Boston, MA 02111-1307, USA.

-->

<mx:HBox 
    width="100%" height="100%"
    horizontalGap="10"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:general="net.undf.abicloud.view.general.*"
    xmlns:privateip="net.undf.abicloud.view.networking.components.privateip.*"
    xmlns:privatenetwork="net.undf.abicloud.view.networking.datacenter.privatenetwork.*"
    xmlns:networktree="net.undf.abicloud.view.networking.datacenter.privatenetwork.networktree.*"
    xmlns:vlan="net.undf.abicloud.view.networking.components.vlan.*">

    <mx:Script>
        <![CDATA[
        	import net.undf.abicloud.view.networking.datacenter.privatenetwork.networktree.NetworkTreeItem;
        	import mx.collections.ArrayCollection;
            import mx.effects.Resize;
            import mx.events.EffectEvent;
            import mx.resources.ResourceManager;

            import net.undf.abicloud.vo.infrastructure.DataCenter;
            import net.undf.abicloud.vo.networking.VlanNetwork;
            import net.undf.abicloud.vo.user.Enterprise;
            import net.undf.abicloud.vo.virtualappliance.VirtualDataCenter;

            [Bindable]
            private var _datacenter:DataCenter;

            public function get datacenter():DataCenter
            {
                return _datacenter;
            }

            public function set datacenter(value:DataCenter):void
            {
                _datacenter = value;
                networkTree.init();
                networkTree.requestEnterprises();

                privateIPList.init();

                hideMoreInfoContainer();
            }

            private var resizeEffect:Resize;

            override protected function createChildren():void
            {
                super.createChildren();

                resizeEffect = new Resize();
                resizeEffect.duration = 300;
                resizeEffect.heightFrom = 0;
                resizeEffect.heightTo = 156;
            }

            private function onNetworkTreeItemSelected():void
            {
                if (networkTree.selectedItem is Enterprise)
                {
                    privateIPList.init(networkTree.selectedItem as Enterprise, null,
                                       null);
                    hideMoreInfoContainer();
                }
                else if (networkTree.selectedItem is VirtualDataCenter)
                {
                    privateIPList.init(null, networkTree.selectedItem as VirtualDataCenter);
                    hideMoreInfoContainer();
                }
                else if (networkTree.selectedItem is VlanNetwork)
                {

                	var virtualDatacenter:VirtualDataCenter = VlanNetwork(networkTree.selectedItem).virtualDatacenter;
                	
                    privateIPList.init(null, virtualDatacenter, networkTree.selectedItem as VlanNetwork);
                    vlanRenderer.vlanNetwork = networkTree.selectedItem as VlanNetwork;
                    showMoreInfoContainer();
                }
                else
                {
                    privateIPList.init();
                    hideMoreInfoContainer();
                }
            }
            
            private function returnParentVirtualDatacenter(value:ArrayCollection , vlanNetwork:VlanNetwork):VirtualDataCenter{
            	var virtualdatacenter:VirtualDataCenter;
            	if(value && NetworkTreeItem(value).virtualDatacenters){
            		for(var i:int = 0 ; i < NetworkTreeItem(value).virtualDatacenters.length ; i++){
            			virtualdatacenter = NetworkTreeItem(value).virtualDatacenters.getItemAt(i) as VirtualDataCenter;
            			if(virtualdatacenter.network && virtualdatacenter.network.networks){
            				for(var y:int = 0 ; y < virtualdatacenter.network.networks.length ; y ++){
            					var tmpVlanNetwork:VlanNetwork = virtualdatacenter.network.networks.getItemAt(i) as VlanNetwork;
            					if(tmpVlanNetwork.vlanNetworkId == vlanNetwork.vlanNetworkId){
            						return virtualdatacenter;
            					}
            				}
            			}
            		}
            	}
            	return null;
            }

            private function showMoreInfoContainer():void
            {
                if (!moreInfoContainer.visible)
                {
                    moreInfoContainer.visible = true;
                    resizeEffect.play([ moreInfoContainer ]);
                }
            }

            private function hideMoreInfoContainer():void
            {
                if (moreInfoContainer.visible)
                {
                    resizeEffect.addEventListener(EffectEvent.EFFECT_END, onResizeEffectEnd);
                    resizeEffect.play([ moreInfoContainer ], true);
                }
            }

            private function onResizeEffectEnd(event:EffectEvent):void
            {
                resizeEffect.removeEventListener(EffectEvent.EFFECT_END, onResizeEffectEnd);
                moreInfoContainer.visible = false;
            }

            private function onClickHideButton():void
            {
                hideMoreInfoContainer();
            }
        ]]>
    </mx:Script>

    <!-- Datacenters Private Networks Tree -->
    <general:GeneralSubPanel 
        width="200" height="100%"
        verticalAlign="middle"
        verticalGap="0"
        title="{ResourceManager.getInstance().getString('Networking', 'LABEL_NETWORKS')}">

        <networktree:NetworkTree id="networkTree"
            datacenter="{_datacenter}"
            itemSelected="onNetworkTreeItemSelected()"/>
    </general:GeneralSubPanel>

    <!-- Private IPs -->
    <general:GeneralSubPanel 
        width="100%" height="100%"
        verticalAlign="middle"
        verticalGap="0"
        verticalScrollPolicy="off"
        title="@Resource(bundle='Networking', key='LABEL_PRIVATE_IPS')">

        <privateip:PrivateIPList id="privateIPList"/>

        <mx:VBox id="moreInfoContainer"
            width="100%" height="0"
            horizontalAlign="center"
            paddingBottom="0"
            paddingLeft="0"
            paddingRight="0"
            paddingTop="0"
            verticalGap="0"
            verticalScrollPolicy="off" horizontalScrollPolicy="off"
            visible="false">

            <mx:Button id="hideButton"
                width="49" height="10"
                styleName="UpDownButton"
                click="onClickHideButton()"/>

            <vlan:VLANRenderer id="vlanRenderer"
                width="100%" height="100%"/>
        </mx:VBox>
    </general:GeneralSubPanel>
</mx:HBox>
