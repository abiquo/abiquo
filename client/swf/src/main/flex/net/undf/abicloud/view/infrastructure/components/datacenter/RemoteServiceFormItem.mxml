<?xml version="1.0" encoding="utf-8"?>
<!--

     Abiquo community edition
     cloud management application for hybrid clouds
     Copyright (C) 2008-2010 - Abiquo Holdings S.L.

     This application is free software; you can redistribute it and/or
     modify it under the terms of the GNU LESSER GENERAL PUBLIC
     LICENSE as published by the Free Software Foundation under
     version 3 of the License

     This software is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     LESSER GENERAL PUBLIC LICENSE v.3 for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the
     Free Software Foundation, Inc., 59 Temple Place - Suite 330,
     Boston, MA 02111-1307, USA.

-->

<mx:HBox 
    horizontalGap="0"
    verticalAlign="middle"
    direction="horizontal"
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:utils="net.undf.abicloud.utils.*">

    <mx:Metadata>
		[Event(name="remoteServiceFormItemChange", type="flash.events.Event")]
	</mx:Metadata>

    <mx:Script>
        <![CDATA[
        	import net.undf.abicloud.utils.AbicloudUtils;
        	import net.undf.abicloud.view.main.CommonAssets;
            import mx.resources.ResourceManager;

            import net.undf.abicloud.events.InfrastructureEvent;
            import net.undf.abicloud.vo.service.RemoteService;
            import net.undf.abicloud.vo.service.RemoteServiceType;

            [Bindable]
            private var _checkStatusEnabled:Boolean;

            [Bindable]
            private var _serviceMappingEnabled:Boolean;

            [Bindable]
            private var _remoteServiceType:RemoteServiceType;
            
            private var currentStatus:int = -1;
                      
            [Bindable]
            public var isIpValid:Boolean;
            
            [Bindable]
            public var isUriValid:Boolean = false;

            public function set remoteServiceType(value:RemoteServiceType):void
            {
                _remoteServiceType = value;
            }

            public function get remoteServiceStatus():int
            {
				return currentStatus;
            }

            public function set remoteServiceStatus(value:int):void
            {
            	currentStatus = value;
            	
                if (currentStatus == RemoteService.STATUS_OK)
                {
                    statusImage.source = CommonAssets.genericOK;
                    remoteServiceIsValid = true;
                }
                else
                {
                    statusImage.source = CommonAssets.genericKO;
                    remoteServiceIsValid = false;
                }

            }

            public function set checkStatusEnabled(value:Boolean):void
            {
                _checkStatusEnabled = value;
            }

            public function set serviceMappingEnabled(value:Boolean):void
            {
                _serviceMappingEnabled = value;
            }


            override public function set label(value:String):void
            {
                super.label = value;

                if (title)
                {
                    title.text = value;
                }
            }

            public function init(remoteServiceType:RemoteServiceType = null, defaultDomainName:String = "",
                                 checkStatusEnabled:Boolean = true, serviceMappingEnabled:Boolean = true):void
            {
                _remoteServiceType = remoteServiceType;
                remoteServiceIsValid = false;
                
                if (_remoteServiceType)
                {
                    protocolInput.text = _remoteServiceType.protocol;
                    portInput.text = _remoteServiceType.port;
                    serviceMappingInput.text = _remoteServiceType.serviceMapping;
                }
                else
                {
                    protocolInput.text = "http://";
                    portInput.text = "8080";
                    serviceMappingInput.text = "";
                }

                domainNameInput.text = defaultDomainName;
                _checkStatusEnabled = checkStatusEnabled;
                _serviceMappingEnabled = serviceMappingEnabled;
                statusImage.source = CommonAssets.genericIdle;
                checkUriLength();
                ipValidator.validate();
            }

            public function get formedUri():String
            {
                return protocolInput.text + domainNameInput.text + ":" + portInput.text + "/" + serviceMappingInput.text;
            }
            
            private function checkUriLength():void{
            	isUriValid = protocolInput.text.length + domainNameInput.text.length + portInput.text.length + serviceMappingInput.text.length < 255 && isIpValid;   	
            	dispatchEvent(new Event('remoteServiceFormItemChange'));
            }

            private function onClickCheckButton():void
            {
                //Checking the uri
                var remoteService:RemoteService = new RemoteService();
                remoteService.remoteServiceType = _remoteServiceType;
                remoteService.protocol = protocolInput.text;
                remoteService.domainName = domainNameInput.text;
                remoteService.port = Number(portInput.text);
                remoteService.serviceMapping = serviceMappingInput.text;

                var event:InfrastructureEvent = new InfrastructureEvent(InfrastructureEvent.CHECK_REMOTE_SERVICE_BY_URI);
                event.remoteService = remoteService;
                event.callback = updateStatus;
                dispatchEvent(event);
            }
            
            //Flex Monkey optimization
            public var remoteServiceIsValid:Boolean;

            /**
             * Method called externaly, to set the current status of the RemoteService
             */
            private function updateStatus(statusOK:Boolean):void
            {
                remoteServiceIsValid = statusOK;
                if (statusOK)
                {
                    statusImage.source = CommonAssets.genericOK;
                }
                else
                {
                    statusImage.source = CommonAssets.genericKO;
                }
            }
            
            private function changeTextColor(type:Boolean):void{
            	if(type){
            		domainNameInput.setStyle("color",protocolInput.getStyle("color"));
            		domainNameInput.setStyle("fontWeight","normal");
            	}else{
            		domainNameInput.setStyle("color","red");
            		domainNameInput.setStyle("fontWeight","bold");
            	} 
            	isIpValid = type;
            	checkUriLength();        	
            }
        ]]>
    </mx:Script>
    
    <utils:IPValidator
    	id="ipValidator"
    	source="{domainNameInput}"
    	property="text" required="false"
    	trigger="{domainNameInput}"
    	triggerEvent="change"
    	invalid="changeTextColor(false)"
    	valid="changeTextColor(true)"/>
  
    	
    <mx:Label id="title"
        width="150"
        includeInLayout="{title.text.length &gt; 0}"
        visible="{title.text.length &gt; 0}"/>
    
    <mx:Box width="18" height="18" paddingBottom="0"
    	paddingLeft="0" paddingRight="0" paddingTop="0"
    	verticalAlign="middle" horizontalAlign="center">
	    <mx:Image
	    	id="alertIcon"
	    	creationComplete="AbicloudUtils.getImageFromStyle('CommonAssetsAlert', alertIcon)"
	    	includeInLayout="{!isUriValid || !isIpValid}"
	        visible="{!isUriValid || !isIpValid}"
	        toolTip="{ipValidator.errorMessage}"/>  
	   
	   <mx:Image
	    	id="validIcon"
	    	creationComplete="AbicloudUtils.getImageFromStyle('CommonAssetsChecked', validIcon)"
	    	includeInLayout="{!alertIcon.visible}"
	        visible="{!alertIcon.visible}"
	        toolTip="@Resource(bundle='Infrastructure',key='TOOLTIP_VALID_URI')"/>
    	
    </mx:Box>
   
   <mx:Spacer width="5"/>  	

    <mx:TextInput id="protocolInput"
        width="50" height="20"
        toolTip="@Resource(bundle='Infrastructure', key='LABEL_PROTOCOL')"
        change="checkUriLength()"/>

    <mx:Spacer width="5"/>

    <mx:TextInput id="domainNameInput"
        width="100" height="20"
        restrict="0-9."
        toolTip="{'IP / ' + ResourceManager.getInstance().getString('Infrastructure', 'LABEL_DOMAIN_NAME') }"/>

    <mx:Label 
    	styleName="DataCenterMapMarkRemoteServiceFormItemLabel1"
        text=":"/>

    <mx:TextInput id="portInput"
        width="50" height="20"
        maxChars="5"
        toolTip="@Resource(bundle='Infrastructure', key='LABEL_PORT')"
        change="checkUriLength()"
        restrict="0-9"/>

    <mx:Label
    	styleName="DataCenterMapMarkRemoteServiceFormItemLabel2"
        text="/" includeInLayout="{_serviceMappingEnabled}"
        visible="{_serviceMappingEnabled}"/>

    <mx:TextInput id="serviceMappingInput"
        width="100" height="20"
        includeInLayout="{_serviceMappingEnabled}"
        toolTip="@Resource(bundle='Infrastructure', key='LABEL_SERVICE_MAPPING')"
        change="checkUriLength()"
        visible="{_serviceMappingEnabled}"/>

    <mx:HBox 
        horizontalGap="0"
        paddingBottom="0"
        paddingLeft="20"
        paddingRight="0"
        paddingTop="0"
        includeInLayout="{_checkStatusEnabled}"
        visible="{_checkStatusEnabled}">

        <utils:SmoothImage id="statusImage"/>

        <mx:Spacer width="6"/>

        <mx:Button id="checkButton"
            height="18"
            label="@Resource(bundle='Common', key='BUTTON_CHECK')"
            click="onClickCheckButton()"/>
    </mx:HBox>
</mx:HBox>
