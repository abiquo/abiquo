<?xml version="1.0" encoding="utf-8"?>
<!--

     Abiquo community edition
     cloud management application for hybrid clouds
     Copyright (C) 2008-2010 - Abiquo Holdings S.L.

     This application is free software; you can redistribute it and/or
     modify it under the terms of the GNU LESSER GENERAL PUBLIC
     LICENSE as published by the Free Software Foundation under
     version 3 of the License

     This software is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     LESSER GENERAL PUBLIC LICENSE v.3 for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the
     Free Software Foundation, Inc., 59 Temple Place - Suite 330,
     Boston, MA 02111-1307, USA.

-->

<mx:HBox 
    width="100%" height="100%"
    paddingTop="6"
    verticalGap="0"
    verticalAlign="top"
    verticalScrollPolicy="off" horizontalScrollPolicy="off"
    xmlns:mx="http://www.adobe.com/2006/mxml">

    <mx:Script>
        <![CDATA[
        	import net.undf.abicloud.vo.infrastructure.Datastore;
        	import mx.charts.series.items.PieSeriesItem;
        	import mx.charts.HitData;
            import mx.collections.ArrayCollection;
            import mx.resources.ResourceBundle;
            import mx.resources.ResourceManager;
            import mx.utils.ObjectUtil;

            import net.undf.abicloud.model.AbiCloudModel;
            import net.undf.abicloud.vo.infrastructure.PhysicalMachine;

            [Bindable]
            private var _ramChartDP:ArrayCollection;

            [Bindable]
            private var _cpuChartDP:ArrayCollection;

            [Bindable]
            private var _hdChartDP:ArrayCollection;

            [Bindable]
            private var shadow:DropShadowFilter = new DropShadowFilter(2, 90);

            [ResourceBundle("Infrastructure")]
            private var rb:ResourceBundle;

            [Bindable]
            private var _physicalMachine:PhysicalMachine;

            /**
             * @private
             */
            public function set physicalMachine(value:PhysicalMachine):void
            {
                this._physicalMachine = value;
                this._physicalMachineEdited = ObjectUtil.copy(value) as PhysicalMachine;


                //Building chart's Data Providers
                
                var ramUsed:int =  _physicalMachine.ramUsed;
                var cpuUsed:int =  _physicalMachine.cpuUsed;
                var hdObject:Object = returnDataStoresSizes();

                var ramFree:int = (_physicalMachine.ram - _physicalMachine.ramUsed) > 0 ? (_physicalMachine.ram - _physicalMachine.ramUsed) : 0;
                var cpuFree:int = ((_physicalMachine.cpu * _physicalMachine.cpuRatio) - _physicalMachine.cpuUsed) > 0 ? ((_physicalMachine.cpu * _physicalMachine.cpuRatio) - _physicalMachine.cpuUsed) : 0;
                var hdFree:String = (hdObject.free) > 0 ? Number((hdObject.free) / AbiCloudModel.GB_TO_BYTES).toFixed(1) : "0";
				
				var ramOversubscrived:int = 0;
				var cpuOversubscrived:int = 0;
				var hdOversubscrived:int = 0;
				
				if(ramFree == 0){
					ramUsed = 0;
					ramOversubscrived = _physicalMachine.ramUsed;
				}
				if(cpuFree == 0){
					cpuUsed = 0;
					cpuOversubscrived = _physicalMachine.cpuUsed;
				}
                
                _ramChartDP = new ArrayCollection([ { id: 'ramUsed', label: ResourceManager.getInstance().getString("Infrastructure",
                                                                                                                    "LABEL_USED"), data: ramUsed },
                                                    { id: 'ramFree', label: ResourceManager.getInstance().getString("Infrastructure",
                                                                                                                    "LABEL_FREE"), data: ramFree },
                                                    { id: 'ramOver', label: ResourceManager.getInstance().getString("Infrastructure",
                                                                                                                    "LABEL_RAM_OVERSUBSCRIBED"), data: ramOversubscrived }
                                                  ]);

                _cpuChartDP = new ArrayCollection([ { id: 'cpuUsed', label: ResourceManager.getInstance().getString("Infrastructure",
                                                                                                                    "LABEL_USED"), data: cpuUsed },
                                                    { id: 'cpuFree', label: ResourceManager.getInstance().getString("Infrastructure",
                                                                                                                    "LABEL_FREE"), data: cpuFree },
                                                    { id: 'cpuOver', label: ResourceManager.getInstance().getString("Infrastructure",
                                                                                                                    "LABEL_CPU_OVERSUBSCRIBED"), data: cpuOversubscrived }
                                                  ]);

                _hdChartDP = new ArrayCollection([ { id: 'hdUsed', label: ResourceManager.getInstance().getString("Infrastructure",
                                                                                                                  "LABEL_USED"), data: Number(hdObject.used / AbiCloudModel.GB_TO_BYTES).toFixed(1) },
                                                   { id: 'hdFree', label: ResourceManager.getInstance().getString("Infrastructure",
                                                                                                                  "LABEL_FREE"), data: Number(hdObject.free / AbiCloudModel.GB_TO_BYTES).toFixed(1) },
                                                   { id: 'hdOver', label: "", data: hdOversubscrived }
                                                 ]);
            }

            [Bindable]
            private var _physicalMachineEdited:PhysicalMachine;

            /**
             * Returns a copy (not original) of _physicalMachine, with the changes that can be made in this component
             */
            public function get physicalMachineEdited():PhysicalMachine
            {
                return this._physicalMachineEdited;
            }
            
            /**
             * Custom data tip displayed when the mouse is over the pie
             */
            private function pieChart_dataTipFunction(item:HitData):String {
                var itemChart:PieSeriesItem = item.chartItem as PieSeriesItem;
                var percentage:Number = itemChart.percentValue ;
                var total:int;
                var hdObject:Object = returnDataStoresSizes();
                switch(itemChart.item.id){
                	case "ramOver":
                		total = _physicalMachine.ram;	
                		if(itemChart.item.data != 0){
                			percentage = Math.ceil((itemChart.item.data / _physicalMachine.ram)*100);
                		}
                		break;
                	case "ramUsed":
                		total = _physicalMachine.ram;
                		break;
                	case "ramFree":
                		total = _physicalMachine.ram;
                		break;
                	case "cpuOver":
                		total = _physicalMachine.cpu * _physicalMachine.cpuRatio;
                		if(itemChart.item.data != 0){
	                		percentage = Math.ceil((itemChart.item.data / (_physicalMachine.cpu * _physicalMachine.cpuRatio))*100);
	                	}
                		break;
                	case "cpuUsed":
                		total = _physicalMachine.cpu * _physicalMachine.cpuRatio;
                		break;
                	case "cpuFree":
                		total = _physicalMachine.cpu * _physicalMachine.cpuRatio;
                		break;
                	default:
                		total = int(Number(hdObject.total / AbiCloudModel.GB_TO_BYTES).toFixed(1)); 
                		break;
                }
                
                return "<b>" + itemChart.item.label + ": "+ Number(percentage).toFixed(2) +"%</b><br />" +
                        itemChart.item.data + " of " + total.toString(); 
            }
            
            
            /**
             * Function that returns the used and free size of datastore
             */
            private function returnDataStoresSizes():Object{
            	var sizeObject:Object = new Object();
            	sizeObject.total = 0;
            	sizeObject.free = 0;
            	sizeObject.used = 0;
            	
            	var datastore:Datastore;
            	
            	for(var i:int = 0 ; i < this._physicalMachine.datastores.length; i++){
            		datastore = this._physicalMachine.datastores.getItemAt(i) as Datastore;
            		if(datastore.enabled){
            			sizeObject.total += datastore.size;
            			sizeObject.free += datastore.size - datastore.usedSize;
            			sizeObject.used += datastore.usedSize;
            		}
            	}            	
            	return sizeObject;
            }

        ]]>
    </mx:Script>

    <mx:RadialGradient id="freeColorRadial"
        angle="90">
        <mx:entries>
            <mx:GradientEntry 
                color="0x339933"
                alpha="1"/>
            <mx:GradientEntry 
                color="0x126712"
                alpha="1"/>
        </mx:entries>
    </mx:RadialGradient>

    <mx:RadialGradient id="usedColorRadial"
        angle="90">
        <mx:entries>
            <mx:GradientEntry 
                color="0xCC0033"
                alpha="1"/>
            <mx:GradientEntry 
                color="0x870016"
                alpha="1"/>
        </mx:entries>
    </mx:RadialGradient>
    
    <mx:RadialGradient id="oversubscrivedColorRadial"
        angle="90">
        <mx:entries>
            <mx:GradientEntry 
                color="0xFFCC00"
                alpha="1"/>
            <mx:GradientEntry 
                color="0xF7A900"
                alpha="1"/>
        </mx:entries>
    </mx:RadialGradient>
    <mx:VBox width="33%" 
    	horizontalAlign="center" height="100%" verticalGap="0">
	    <mx:Label text="RAM (MB)" width="100%"/>    	
	    <mx:PieChart id="ramChart"
	    	paddingBottom="0" paddingTop="0" paddingLeft="0" paddingRight="0"
	        width="100%" height="100%"
	        dataProvider="{_ramChartDP}"
	        showDataTips="true"
	        dataTipFunction="pieChart_dataTipFunction">
	
	        <mx:series>
	            <mx:PieSeries labelPosition="none"
	                field="data"
	                nameField="label"
	                filters="{[]}"
	                fills="{[usedColorRadial, freeColorRadial, oversubscrivedColorRadial]}"/>
	        </mx:series>
	    </mx:PieChart>
    </mx:VBox>



    <mx:VRule 
        width="1" height="100%"
        horizontalCenter="0"
        styleName="PhysicalMachineRendererStateVRule"
        />
    
    <mx:VBox width="33%" 
        horizontalAlign="center" height="100%" verticalGap="0">
	    <mx:Label text="CPU (V-CPU)" width="100%"/>
	    <mx:PieChart id="cpuChart"
	        paddingBottom="0" paddingTop="0" paddingLeft="0" paddingRight="0"
            width="100%" height="100%"
	        dataProvider="{_cpuChartDP}"
	        showDataTips="true"
	        dataTipFunction="pieChart_dataTipFunction">
	
	        <mx:series>
	            <mx:PieSeries labelPosition="none"
	                field="data"
	                nameField="label"
	                filters="{[]}"
	                fills="{[usedColorRadial, freeColorRadial, oversubscrivedColorRadial]}"/>
	        </mx:series>
	    </mx:PieChart>
    </mx:VBox>

    <mx:VRule 
        width="1" height="100%"
        horizontalCenter="0"
        styleName="PhysicalMachineRendererStateVRule"/>


    <mx:VBox width="33%" 
        horizontalAlign="center" height="100%" verticalGap="0">
	    <mx:Label text="{ResourceManager.getInstance().getString('Infrastructure', 'LABEL_HD') + ' (GB)'}" width="100%"/>
	
	    <mx:PieChart id="hdChart"
	       paddingBottom="0" paddingTop="0" paddingLeft="0" paddingRight="0"
            width="100%" height="100%"
	        dataProvider="{_hdChartDP}"
	        showDataTips="true"
	        dataTipFunction="pieChart_dataTipFunction">
	
	        <mx:series>
	            <mx:PieSeries labelPosition="none"
	                field="data"
	                nameField="label"
	                filters="{[]}"
	                fills="{[usedColorRadial, freeColorRadial]}"/>
	        </mx:series>
	    </mx:PieChart>
    </mx:VBox>
</mx:HBox>
