<?xml version="1.0" encoding="utf-8"?>
<!--

     Abiquo community edition
     cloud management application for hybrid clouds
     Copyright (C) 2008-2010 - Abiquo Holdings S.L.

     This application is free software; you can redistribute it and/or
     modify it under the terms of the GNU LESSER GENERAL PUBLIC
     LICENSE as published by the Free Software Foundation under
     version 3 of the License

     This software is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     LESSER GENERAL PUBLIC LICENSE v.3 for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the
     Free Software Foundation, Inc., 59 Temple Place - Suite 330,
     Boston, MA 02111-1307, USA.

-->

<mx:HBox 
    width="100%" height="100%"
    horizontalScrollPolicy="off" verticalScrollPolicy="off"
    styleName="PhysicalMachineRenderer"
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:componentsPM="net.undf.abicloud.view.infrastructure.components.physicalmachine.*"
    xmlns:utils="net.undf.abicloud.utils.*">

    <mx:Script>
        <![CDATA[
        	import net.undf.abicloud.vo.infrastructure.HyperVisor;
            import net.undf.abicloud.vo.infrastructure.PhysicalMachineCreation;
            import mx.resources.ResourceManager;
            import mx.resources.ResourceBundle;
            import mx.collections.ArrayCollection;
            import net.undf.abicloud.events.InfrastructureEvent;
            import net.undf.abicloud.vo.infrastructure.PhysicalMachine;


            //The Physical Machine that will be rendered
            [Bindable]
            protected var _physicalMachine:PhysicalMachine;
            
            //Need to preserve the state when the background process update data
            private var _previousPhysicalMachine:PhysicalMachine;
            private var _saveState:int;

            [Bindable]
            private var _editMode:Boolean;
            
            private var _hypervisor:HyperVisor;
            
            [Bindable(event="hypervisorUpdatedEvent")]
            public function get hypervisor():HyperVisor
            {
            	return this._hypervisor;
            }
            
            public function set hypervisor(value:HyperVisor):void
            {
            	this._hypervisor = value;
            	dispatchEvent(new Event('hypervisorUpdatedEvent'));
            }
            


            public function set physicalMachine(value:PhysicalMachine):void
            {
                //Iniciate the previous physical machine object
                if(!this._previousPhysicalMachine){
                	this._previousPhysicalMachine = new PhysicalMachine();
                	this._saveState = 0;
                }
                
                //update the previous physical machine object
                if(value){
                	if(this._previousPhysicalMachine.id != value.id){
                		this._previousPhysicalMachine = value;
                		this._saveState = 0;
                	}
                	physicalMachineVS.selectedIndex = this._saveState;
                	                	
                }
                this._physicalMachine = value;
                dispatchEvent(new Event("physicalMachineChange"));
            }

            [Bindable(event="physicalMachineChange")]
            public function get physicalMachine():PhysicalMachine
            {
                return this._physicalMachine;
            }

            /**
             * Initializes this component
             */
            public function init():void
            {
                this._editMode = false;

                /* if (physicalMachineVS != null)
                    physicalMachineVS.selectedIndex = 0; */
            }

            /**
             * Sets this component in edit mode
             */
            private function onClickEdit():void
            {
                this._editMode = true;

                //Setting the values that can be edited
                nameInput.text = this._physicalMachine.name;
            }

            /**
             * Saves the changes made to the physical machine being rendered
             */
            private function onClickAccept():void
            {
                //Getting the changes made to the Physical Machine in the component that is being showed
                var physicalMachineCreation:PhysicalMachineCreation = new PhysicalMachineCreation();
                switch (physicalMachineVS.selectedIndex)
                {
                    case 0:
                        physicalMachineCreation.physicalMachine = physicalMachineRendererGeneral.physicalMachineEdited;
                        physicalMachineCreation.hypervisors = physicalMachineRendererGeneral.hypervisorsEdited;
                        break;

                    case 1:
                        physicalMachineCreation.physicalMachine = physicalMachineRendererDescription.physicalMachineEdited;
                        //There is no Hypervisor information modification in this component
                        physicalMachineCreation.hypervisors = new ArrayCollection();
                        break;

                    case 2:
                        physicalMachineCreation.physicalMachine = physicalMachineRendererState.physicalMachineEdited;
                        //There is no Hypervisor information modification in this component
                        physicalMachineCreation.hypervisors = new ArrayCollection();
                }

                //Updating changes made to name field, that is editable in this component
                physicalMachineCreation.physicalMachine.name = nameInput.text;


                //Announcing that the Physical Machine has been edited
                var infrastructureEvent:InfrastructureEvent = new InfrastructureEvent(InfrastructureEvent.EDIT_PHYSICALMACHINE);
                infrastructureEvent.physicalMachineCreation = physicalMachineCreation;
                dispatchEvent(infrastructureEvent);

                //Turning off edit mode
                this._editMode = false;
            }

            /**
             * Cancels the edition of the physical machine being rendered
             */
            private function onClickCancel():void
            {
                this._editMode = false;
            }
            
            /**
             * Update some info when changing the physical machine state
             */
            private function updatePhysicalMachineInfo(event:Event):void{
            	this._editMode = false ; 
            	this._saveState = ViewStack(event.currentTarget).selectedIndex;
            }
            
            private function childChange():void{
            	
            }
        	
        	private function updateTab():void{
        		
        	}
        	
        	private function onHypervisorUpdated():void
        	{
        		hypervisor = physicalMachineRendererGeneral.hypervisor;
        	}
        ]]>
    </mx:Script>


    <utils:SmoothImage id="physicalMachineIcon"
        width="120" height="120"
        creationComplete="physicalMachineIcon.source = StyleManager.getStyleDeclaration('.PhysicalMachineIcon').getStyle('source')"
        maintainAspectRatio="true"/>

    <mx:VBox id="testtt"
        height="100%"
        styleName="PhysicalMachinesRendererBaseTesttt"
        maxWidth="400"
        horizontalScrollPolicy="off"
        >
        <mx:HBox 
            paddingBottom="0"
            paddingLeft="0"
            paddingRight="0"
            paddingTop="0">
            <mx:Label id="nameLabel"
				styleName="PhysicalMachinesRendererBaseNameLabel"
                minWidth="100" maxWidth="200"
                text="{this._physicalMachine.name}" truncateToFit="true"
                toolTip="{this._physicalMachine.name}"
                includeInLayout="{! _editMode}"
                visible="{! _editMode}"/>

            <mx:TextInput id="nameInput"
                width="120" height="20"
                maxChars="29" includeInLayout="{_editMode}"
                visible="{_editMode}"/>

            <utils:SmoothImage id="accessEditModeButton"
                height="17"
                creationComplete="net.undf.abicloud.utils.AbicloudUtils.getImageFromStyle('PhysicalMachineEditIcon', accessEditModeButton)"
                toolTip="@Resource(bundle='Common', key='BUTTON_EDIT_TOOLTIP')"
                includeInLayout="{! this._editMode}"
                visible="{! this._editMode}"
                click="onClickEdit()"/>

            <mx:Button 
                height="17"
                label="@Resource(bundle='Common', key='BUTTON_ACCEPT')"
                includeInLayout="{this._editMode}"
                visible="{this._editMode}"
                click="onClickAccept()"/>

            <mx:Button 
                height="17"
                label="@Resource(bundle='Common', key='BUTTON_CANCEL')"
                styleName="AlternativeButton" includeInLayout="{this._editMode}"
                visible="{this._editMode}"
                click="onClickCancel()"/>
        </mx:HBox>

        <mx:TabBar 
            width="{nameLabel.width}"
            styleName="CustomVerticalTabBar" dataProvider="physicalMachineVS"
            direction="vertical"/>
    </mx:VBox>

    <mx:ViewStack id="physicalMachineVS"
        width="100%" height="100%"
        childIndexChange="childChange()"
        tabChildrenChange="updateTab()"
        change="updatePhysicalMachineInfo(event)">

        <!-- General Info -->
        <componentsPM:PhysicalMachineRendererGeneral id="physicalMachineRendererGeneral"
            width="100%" height="100%"
            label="@Resource(bundle='Infrastructure', key='LABEL_GENERAL')"
            physicalMachine="{this._physicalMachine}"
            hypervisorUpdated="onHypervisorUpdated()"
            editMode="{this._editMode}"/>

        <!-- Description Info -->
        <componentsPM:PhysicalMachineRendererDescription id="physicalMachineRendererDescription"
            width="100%" height="100%"
            label="@Resource(bundle='Infrastructure', key='LABEL_DESCRIPTION')"
            physicalMachine="{this._physicalMachine}"
            editMode="{this._editMode}"/>

        <!-- State Info -->
        <componentsPM:PhysicalMachineRendererState id="physicalMachineRendererState"
            width="100%" height="100%"
            label="@Resource(bundle='Infrastructure', key='LABEL_STATE')"
            physicalMachine="{this._physicalMachine}"/>
    </mx:ViewStack>
</mx:HBox>
