<?xml version="1.0" encoding="utf-8"?>
<!--

     Abiquo community edition
     cloud management application for hybrid clouds
     Copyright (C) 2008-2010 - Abiquo Holdings S.L.

     This application is free software; you can redistribute it and/or
     modify it under the terms of the GNU LESSER GENERAL PUBLIC
     LICENSE as published by the Free Software Foundation under
     version 3 of the License

     This software is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     LESSER GENERAL PUBLIC LICENSE v.3 for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the
     Free Software Foundation, Inc., 59 Temple Place - Suite 330,
     Boston, MA 02111-1307, USA.

-->

<general:AbiCloudPopUp xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:general="net.undf.abicloud.view.general.*"
    titleText="@Resource(bundle='Networking', key='POPUP_TITLE_VLAN_EDIT')"
    wikiUrl="{AbiCloudModel.getInstance().configurationManager.config.client_wiki_vdc_createPrivateNetwork.value}">

    <mx:Script>
        <![CDATA[
        	import net.undf.abicloud.vo.virtualappliance.VirtualDataCenter;
        	import net.undf.abicloud.model.AbiCloudModel;
            import mx.utils.ObjectUtil;
            import mx.utils.StringUtil;

            import net.undf.abicloud.events.NetworkingEvent;
            import net.undf.abicloud.vo.networking.Network;
            import net.undf.abicloud.vo.networking.NetworkConfiguration;
            import net.undf.abicloud.vo.networking.VlanNetwork;

            //The VlanNetwork to edit
            [Bindable]
            private var _vlanNetwork:VlanNetwork;

            //The Network to which the VLAN belongs
            private var _network:Network;
            
            private var _virtualDatacenter:VirtualDataCenter;

            [Bindable]
            private var _isFormValid:Boolean;

            public function init(virtualDatacenter:VirtualDataCenter, vlanNetwork:VlanNetwork):void
            {
                _virtualDatacenter = virtualDatacenter;
                _network = virtualDatacenter.network;
                _vlanNetwork = vlanNetwork;

                //Setting fields
                nameInput.text = _vlanNetwork.networkName;
                networkAddressInput.text = _vlanNetwork.configuration.networkAddress;
                netmaskInput.text = StringUtil.substitute("/{0}\t({1})", _vlanNetwork.configuration.mask,
                                                          _vlanNetwork.configuration.netmask);
                gatewayInput.text = _vlanNetwork.configuration.gateway;
                primaryDNSInput.text = _vlanNetwork.configuration.primaryDNS;
                secondaryDNSInput.text = _vlanNetwork.configuration.secondaryDNS;
                sufixDNSInput.text = _vlanNetwork.configuration.sufixDNS;
                defaultNetworkInput.selected = _vlanNetwork.defaultNetwork;
                defaultNetworkInput.enabled = !_vlanNetwork.defaultNetwork;

                validateForm();
                nameInput.setFocus();
                
                //To close the form if the vlan is edited
                AbiCloudModel.getInstance().networkingManager.addEventListener('vlanUpdated',closeForm);
            }

            private function validateForm():void
            {
                _isFormValid = nameInput.text.length > 0 && gatewayInput.text.length > 0;
            }

            private function onAccept():void
            {
                var networkConfiguration:NetworkConfiguration = ObjectUtil.copy(_vlanNetwork.configuration) as NetworkConfiguration;
                networkConfiguration.gateway = gatewayInput.text;
                networkConfiguration.primaryDNS = primaryDNSInput.text;
                networkConfiguration.secondaryDNS = secondaryDNSInput.text;
                networkConfiguration.sufixDNS = sufixDNSInput.text;

                var event:NetworkingEvent;
                
                if(this._vlanNetwork.networkType == VlanNetwork.EXTERNAL 
                || this._vlanNetwork.networkType == VlanNetwork.UNMANAGED){
                	event = new NetworkingEvent(NetworkingEvent.SET_DEFAULT_VLAN);
                }else{
                	event = new NetworkingEvent(NetworkingEvent.EDIT_VLAN);
                }
                
                event.virtualDatacenter = _virtualDatacenter;
                event.network = _network;
                event.vlanNetwork = _vlanNetwork;
                event.networkName = nameInput.text;
                event.networkConfiguration = networkConfiguration;
                event.defaultNetwork = defaultNetworkInput.selected;
                event.callback = closeForm;
                
                //Close in case of External Vlan and no changes done
                if( (this._vlanNetwork.networkType == VlanNetwork.EXTERNAL 
                  || this._vlanNetwork.networkType == VlanNetwork.UNMANAGED )&& !defaultNetworkInput.selected){
                    closeForm();	
                }else{
	                dispatchEvent(event);                	
                }
                
 
            }


            private function closeForm(event:Event = null):void
            {
                dispatchEvent(new Event("vlanFormEditClose"));
            }

            /**
             * Basic behaivour is as follows:
             * If user presses the Enter, in any part of this Pop Up (except buttons), it would be
             * like Accept Button has been pressed
             */
            override protected function keyboardHandler(keyboardEvent:KeyboardEvent):void
            {
                if (keyboardEvent.target == acceptButton || keyboardEvent.target == cancelButton)
                    super.keyboardHandler(keyboardEvent);
                else
                {
                    if (keyboardEvent.keyCode == 13 && acceptButton.enabled)
                        onAccept();
                }
            }
        ]]>
    </mx:Script>

    <mx:Form paddingTop="3">

        <mx:FormItem 
            label="@Resource(bundle='Networking', key='LABEL_NAME')"
            required="true">
            <mx:TextInput id="nameInput"
            	editable="{this._vlanNetwork.networkType != VlanNetwork.EXTERNAL &amp;&amp; this._vlanNetwork.networkType != VlanNetwork.UNMANAGED}"
                height="20"
                maxChars="39"
                change="validateForm()"/>
        </mx:FormItem>

        <mx:FormItem label="@Resource(bundle='Networking', key='LABEL_ADDRESS')">
            <mx:TextInput id="networkAddressInput"
                height="20"
                editable="false"/>
        </mx:FormItem>

        <mx:FormItem label="@Resource(bundle='Networking', key='LABEL_NETMASK')">
            <mx:TextInput id="netmaskInput"
                height="20"
                editable="false"/>
        </mx:FormItem>

        <mx:FormItem 
            label="@Resource(bundle='Networking', key='LABEL_GATEWAY')"
            required="true">
            <mx:TextInput id="gatewayInput"
            	editable="{this._vlanNetwork.networkType != VlanNetwork.EXTERNAL &amp;&amp; this._vlanNetwork.networkType != VlanNetwork.UNMANAGED}"
                height="20"
                maxChars="39"
                change="validateForm()"
                restrict="0-9.:A-F"/>
        </mx:FormItem>

        <mx:FormItem label="@Resource(bundle='Networking', key='LABEL_PRIMARY_DNS')">
            <mx:TextInput id="primaryDNSInput"
                editable="{this._vlanNetwork.networkType != VlanNetwork.EXTERNAL &amp;&amp; this._vlanNetwork.networkType != VlanNetwork.UNMANAGED}"
                height="20"
                maxChars="39"
                restrict="0-9.:A-F"/>
        </mx:FormItem>

        <mx:FormItem label="@Resource(bundle='Networking', key='LABEL_SECONDARY_DNS')">
            <mx:TextInput id="secondaryDNSInput"
            	editable="{this._vlanNetwork.networkType != VlanNetwork.EXTERNAL &amp;&amp; this._vlanNetwork.networkType != VlanNetwork.UNMANAGED}"
                height="20"
                maxChars="39"
                restrict="0-9.:A-F"/>
        </mx:FormItem>

        <mx:FormItem label="@Resource(bundle='Networking', key='LABEL_DNS_SUFIX')">
            <mx:TextInput id="sufixDNSInput"
            	editable="{this._vlanNetwork.networkType != VlanNetwork.EXTERNAL &amp;&amp; this._vlanNetwork.networkType != VlanNetwork.UNMANAGED}"
                height="20"
                maxChars="39"/>
        </mx:FormItem>

        <mx:FormItem label="@Resource(bundle='Networking', key='LABEL_VDC_DEFAULT_NETWORK')">
            <mx:CheckBox id="defaultNetworkInput"/>
        </mx:FormItem>

        <mx:FormItem direction="horizontal">
            <mx:Button id="acceptButton"
                height="18"
                label="@Resource(bundle='Common', key='BUTTON_ACCEPT')"
                enabled="{_isFormValid}"
                click="onAccept()"/>

            <mx:Button id="cancelButton"
                height="18"
                label="@Resource(bundle='Common', key='BUTTON_CANCEL')"
                styleName="AlternativeButton"
                click="closeForm(event)"/>
        </mx:FormItem>
    </mx:Form>

</general:AbiCloudPopUp>
