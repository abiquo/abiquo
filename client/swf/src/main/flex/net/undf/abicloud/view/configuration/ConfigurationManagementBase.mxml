<?xml version="1.0" encoding="utf-8"?>
<!--

     Abiquo community edition
     cloud management application for hybrid clouds
     Copyright (C) 2008-2010 - Abiquo Holdings S.L.

     This application is free software; you can redistribute it and/or
     modify it under the terms of the GNU LESSER GENERAL PUBLIC
     LICENSE as published by the Free Software Foundation under
     version 3 of the License

     This software is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     LESSER GENERAL PUBLIC LICENSE v.3 for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the
     Free Software Foundation, Inc., 59 Temple Place - Suite 330,
     Boston, MA 02111-1307, USA.

-->

<general:AbiCloudPopUp 
    resizeEffect="{myResize}"
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:general="net.undf.abicloud.view.general.*"
    xmlns:registration="net.undf.abicloud.view.configuration.components.registration.*"
    xmlns:heartbeat="net.undf.abicloud.view.configuration.components.heartbeat.*"
    wikiUrl="{AbiCloudModel.getInstance().configurationManager.config.client_wiki_config_general.value}"
    titleText="@Resource(bundle='Main', key='HEADER_MENU_CONFIG')">

    <mx:Script>
        <![CDATA[
            import net.undf.abicloud.view.configuration.components.heartbeat.HeartbeatManagement;
            import net.undf.abicloud.view.configuration.components.registration.RegistrationForm;
            import net.undf.abicloud.view.general.GeneralToggledContainer;
            import mx.managers.PopUpManager;
            import net.undf.abicloud.model.AbiCloudModel;
            import net.undf.abicloud.events.ConfigurationEvent;
            import mx.resources.ResourceManager;
            import mx.resources.ResourceBundle;


            [ResourceBundle("Configuration")]
            private var configurationRB:ResourceBundle;


            //Registration form used to register and update register information
            private var _registrationForm:RegistrationForm;

            //Heartbeat management component
            private var _heartbeatManagement:HeartbeatManagement;
            
            override protected function createChildren():void
            {
                super.createChildren();

                //Creating configuration sections
                this._registrationForm = new RegistrationForm();
                toggledContainer.addContent(this._registrationForm, ResourceManager.getInstance().getString("Configuration",
                                                                                                            "LABEL_REGISTRATION"));

                /* this._heartbeatManagement = new HeartbeatManagement();
                toggledContainer.addContent(this._heartbeatManagement, ResourceManager.getInstance().getString("Configuration",
                                                                                                               "LABEL_HEARTBEATING")); */
            }

            /**
             * Initializes the ConfigurationManagement to be shown
             */
            public function init():void
            {
                toggledContainer.selectedIndex = 0;

                //Initalize the different configuration sections
                _registrationForm.setFormInputs();
            }


            /**
             * Force the Hearbeating configuration to show on screen
             */
            public function showHearbeating():void
            {
                toggledContainer.selectedIndex = 1;
            }

            public function onClickCloseButton():void
            {
                dispatchEvent(new Event("closeConfigurationManagement"));
            }

            /**
             * To hide contents when a resize effect starts. For performance purposes
             */
            private function onResizeEffectStart():void
            {
                toggledContainer.visible = false;
            }

            /**
             * While resizing, we keep the PopUp centered
             */
            private function onResizeEffectUpdate():void
            {
                PopUpManager.centerPopUp(this);
            }

            /**
             * To hide contents when a resize effect ends. For performance purposes
             */
            private function onResizeEffectEnd():void
            {
                toggledContainer.visible = true;
            }
        ]]>
    </mx:Script>

    <mx:Resize id="myResize"
        duration="800"
        heightTo="{toggledContainer.viewStack.selectedChild.explicitHeight}"
        widthTo="{toggledContainer.viewStack.selectedChild.explicitWidth}"
        tweenStart="onResizeEffectStart()"
        tweenUpdate="onResizeEffectUpdate()"
        tweenEnd="onResizeEffectEnd()"/>

    <mx:HBox width="100%"
    	visible="{AbiCloudModel.getInstance().configurationManager.registration != null}"
    	includeInLayout="{AbiCloudModel.getInstance().configurationManager.registration != null}">
        <mx:Label 
            fontSize="14"
            fontWeight="bold"
            text="@Resource(bundle='Configuration', key='LABEL_SYSTEM_KEY')"/>

        <mx:Label 
            fontSize="14"
            text="{AbiCloudModel.getInstance().configurationManager.registration.id}"
            selectable="true"/>
    </mx:HBox>

    <general:GeneralToggledContainer id="toggledContainer"
        width="100%" height="100%"/>

    <mx:HBox 
        width="100%"
        horizontalAlign="center"
		styleName="ConfigurationConfigurationManagementBaseHBox1"
		verticalScrollPolicy="off"
		>
        <mx:Button id="closeButton"
            height="18"
            label="@Resource(bundle='Common', key='BUTTON_CLOSE')"
            styleName="AlternativeButton"
            click="onClickCloseButton()"/>
    </mx:HBox>
</general:AbiCloudPopUp>
