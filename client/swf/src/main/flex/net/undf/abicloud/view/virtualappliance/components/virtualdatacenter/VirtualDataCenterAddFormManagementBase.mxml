<?xml version="1.0" encoding="utf-8"?>
<!--

     Abiquo community edition
     cloud management application for hybrid clouds
     Copyright (C) 2008-2010 - Abiquo Holdings S.L.

     This application is free software; you can redistribute it and/or
     modify it under the terms of the GNU LESSER GENERAL PUBLIC
     LICENSE as published by the Free Software Foundation under
     version 3 of the License

     This software is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     LESSER GENERAL PUBLIC LICENSE v.3 for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the
     Free Software Foundation, Inc., 59 Temple Place - Suite 330,
     Boston, MA 02111-1307, USA.

-->

<AbiCloudPopUp 
    xmlns="net.undf.abicloud.view.general.*"
    xmlns:mx="http://www.adobe.com/2006/mxml"
    titleText="@Resource(bundle='VirtualAppliance', key='POPUP_TITLE_VIRTUALDATACENTER_ADD')"
    xmlns:enterprise="net.undf.abicloud.view.user.components.enterprise.*"
    wikiUrl="{AbiCloudModel.getInstance().configurationManager.config.client_wiki_vdc_createVdc.value}">

    <mx:Script>
        <![CDATA[
        	import net.undf.abicloud.utils.SecuredPrivilegeAccess;
        	import net.undf.abicloud.vo.user.PrivilegeType;
        	import net.undf.abicloud.events.InfrastructureEvent;
        	import net.undf.abicloud.vo.virtualhardware.ResourceAllocationLimit;
        	import net.undf.abicloud.vo.infrastructure.HyperVisorType;
        	import net.undf.abicloud.events.VirtualApplianceEvent;
        	import net.undf.abicloud.vo.virtualappliance.VirtualDataCenter;
        	import net.undf.abicloud.view.user.components.enterprise.EnterpriseForm;
        	import net.undf.abicloud.business.managers.UserManager;
        	import mx.utils.ObjectUtil;
        	import net.undf.abicloud.events.UserEvent;
        	import net.undf.abicloud.model.AbiCloudModel;
            import mx.resources.ResourceManager;
            import mx.managers.PopUpManager;
            import net.undf.abicloud.vo.user.Enterprise;

            //The Enterprise to be managed
            [Bindable]
            private var _enterprise:Enterprise;
           
            [Bindable]
            private var _virtualDataCenterAdd:VirtualDatacenterForm;
            
            private var _virtualDataCenter:VirtualDataCenter;
            
            //Flag to indicate when this component is listening for enterprise creation or edition
            private var _listenerRegistered:Boolean;

            
            override protected function createChildren():void
            {
                super.createChildren();
                
                this._virtualDataCenterAdd = new VirtualDatacenterForm();
                this._virtualDataCenterAdd.percentHeight = 100;
                this._virtualDataCenterAdd.percentWidth = 100;
                this._virtualDataCenterAdd.addEventListener("EnterpriseFormClose",onClickButtonClose);

                toggledContainer.addContent(this._virtualDataCenterAdd, ResourceManager.getInstance().getString("User",
                                                                                "LABEL_GENERAL_INFO"));
                
               //Check privilege
                SecuredPrivilegeAccess.checkElementAccess(PrivilegeType.VDC_MANAGE,"removeChild",saveButton,buttonAction);
            }

            public function init():void
            {
                //Cleaning view
                toggledContainer.selectedIndex = 0;
                this._virtualDataCenterAdd.virtualDatacenter = virtualDatacenter;
                this._virtualDataCenterAdd.init();
                
                //Registering Keyboard events, for standard application behaivor
                this.addEventListener(KeyboardEvent.KEY_UP, keyboardHandler);
                
                //Registering when a VirtualDatacenter has been created
                AbiCloudModel.getInstance().virtualApplianceManager.addEventListener(VirtualApplianceEvent.VIRTUAL_DATACENTER_ADDED,
                                                                                     onVirtualDataCenterAdded);                                                                                     
                //Registering when a VirtualDatacenter has been edited
                AbiCloudModel.getInstance().virtualApplianceManager.addEventListener(VirtualApplianceEvent.VIRTUAL_DATACENTER_EDITED,
                                                                                     onVirtualDataCenterAdded);
            }
            
            public function getAllowedDatacenter():void{
            	var lsDatacenters:InfrastructureEvent = new InfrastructureEvent(InfrastructureEvent.GET_ALLOWED_DATACENTERS);
            	lsDatacenters.enterpriseId = AbiCloudModel.getInstance().loginManager.user.enterprise.id;
                dispatchEvent(lsDatacenters);  
            }
            
            public function set virtualDatacenter(value:VirtualDataCenter):void{
            	this._virtualDataCenter = value;
            }
            
            public function get virtualDatacenter():VirtualDataCenter{
            	return this._virtualDataCenter;
            }

            /**
             * Saves the changes made in the current visible component of toggled container
             */
            public function onClickButtonSave():void
            {
                /* if (toggledContainer.selectedIndex == 0)
                    this._enterpriseAllocationLimits.saveCurrentAllocationLimitsValues(); */  
                
                //AbiCloudModel.getInstance().userManager.dispatchEvent(new Event("saveEnterprise")); 
                
                var event:VirtualApplianceEvent;

                if (this._virtualDataCenter.id != 0)
                {
                    //Editing the enterprise, without modifying the original one until changes are saved in server
                    /* var enterpriseCopy:Enterprise = ObjectUtil.copy(this._enterprise) as Enterprise;

                    //Registering listener, if it is not, to know when the enterprise has been edited
                    if (!this._listenerRegistered)
                    {
                        //UserEvent.ENTERPRISE_EDTIED event is dispatched when an enterprise has been successfully edited
                        AbiCloudModel.getInstance().userManager.addEventListener(UserEvent.ENTERPRISE_EDITED,
                                                                                 enterpriseCallFinishedHandler);
                        this._listenerRegistered = true;
                    }

                    userEvent = new UserEvent(UserEvent.EDIT_ENTERPRISE);
                    userEvent.oldEnterprise = this._enterprise;
                    userEvent.enterprise = enterpriseCopy; */
                    
                    //Editing the VirtualDataCenter, without modifying the original one until changes are saved in server
	                var virtualDataCenterCopy:VirtualDataCenter = ObjectUtil.copy(this._virtualDataCenter) as VirtualDataCenter;
	                virtualDataCenterCopy.name = this._virtualDataCenterAdd.nameInput.text;
                    virtualDataCenterCopy.idDataCenter = this._virtualDataCenterAdd.physicalDataCenterInput.selectedItem.id;
                    virtualDataCenterCopy.hyperType = this._virtualDataCenterAdd.hyperTypeInput.selectedItem as HyperVisorType;
                    virtualDataCenterCopy.limits = ObjectUtil.copy(this._virtualDataCenter.limits) as ResourceAllocationLimit;
	

	                event = new VirtualApplianceEvent(VirtualApplianceEvent.EDIT_VIRTUAL_DATACENTER);
	                event.virtualDataCenter = virtualDataCenterCopy;

                }
                else
                {
                    //We create a new Virtual Datacenter
                    this._virtualDataCenter.enterprise = AbiCloudModel.getInstance().loginManager.user.enterprise;
                    this._virtualDataCenter.name = this._virtualDataCenterAdd.nameInput.text;
                    this._virtualDataCenter.idDataCenter = this._virtualDataCenterAdd.physicalDataCenterInput.selectedItem.id;
                    this._virtualDataCenter.hyperType = this._virtualDataCenterAdd.hyperTypeInput.selectedItem as HyperVisorType;
	
	                event = new VirtualApplianceEvent(VirtualApplianceEvent.CREATE_VIRTUAL_DATACENTER);
	                event.virtualDataCenter = this._virtualDataCenter;
	                event.networkName = this._virtualDataCenterAdd.privateNetworkForm.networkName;
	                event.networkConfiguration = this._virtualDataCenterAdd.privateNetworkForm.networkConfiguration;
                }

                dispatchEvent(event);
                
            }
            
             private function onVirtualDataCenterAdded(event:VirtualApplianceEvent):void
            {
                closeForm();
            } 

            private function closeForm():void
            {
                AbiCloudModel.getInstance().virtualApplianceManager.removeEventListener(VirtualApplianceEvent.VIRTUAL_DATACENTER_ADDED,
                                                                                        onVirtualDataCenterAdded);                                                                                       
                AbiCloudModel.getInstance().virtualApplianceManager.removeEventListener(VirtualApplianceEvent.VIRTUAL_APPLIANCE_EDITED,
                                                                                        onVirtualDataCenterAdded);
                dispatchEvent(new Event("VirtualDatacenterFormAddClose"));
            }
            
             private function enterpriseCallFinishedHandler(event:Event):void
            {
                //Closing form
                onCancel();
            }

            private function onCancel():void
            {
                //Unregistering apropiate event
                if (this._listenerRegistered)
                {
                    if (this._enterprise.id != 0)
                        AbiCloudModel.getInstance().userManager.removeEventListener(UserEvent.ENTERPRISE_EDITED,
                                                                                    enterpriseCallFinishedHandler);
                    else
                        AbiCloudModel.getInstance().userManager.removeEventListener(UserManager.ENTERPRISES_UPDATED,
                                                                                    enterpriseCallFinishedHandler);

                }

                dispatchEvent(new Event("EnterpriseFormClose"));
            }

            /**
             * Announces that user wants to close the PopUp that contains this component
             */
            public function onClickButtonClose():void
            {                
                dispatchEvent(new Event("VirtualDatacenterFormAddClose"));
            }

            /**
             * To hide contents when a resize effect starts. For performance purposes
             */
            private function onResizeEffectStart():void
            {
                toggledContainer.visible = false;
            }

            /**
             * While resizing, we keep the PopUp centered
             */
            private function onResizeEffectUpdate():void
            {
                PopUpManager.centerPopUp(this);
            }

            /**
             * To hide contents when a resize effect ends. For performance purposes
             */
            private function onResizeEffectEnd():void
            {
                toggledContainer.visible = true;
            }
            
             /**
             * Basic behaivour is as follows:
             * If user presses the Enter, in any part of this Pop Up (except buttons), it would be
             * like Accept Button has been pressed
             */
            override protected function keyboardHandler(keyboardEvent:KeyboardEvent):void
            {
       			if (keyboardEvent.keyCode == 13){
       				if(saveButton.enabled && SecuredPrivilegeAccess.userHasPrivilege(PrivilegeType.VDC_MANAGE)){
                        onClickButtonSave();       					
       				}
                }
            }
        ]]>
    </mx:Script>

    <mx:Resize id="myResize"
        duration="800"
        heightTo="{toggledContainer.viewStack.explicitHeight}"
        widthTo="{toggledContainer.viewStack.explicitWidth}"
        tweenStart="onResizeEffectStart()"
        tweenUpdate="onResizeEffectUpdate()"
        tweenEnd="onResizeEffectEnd()"/>

    <GeneralToggledContainer id="toggledContainer"
        width="100%" height="100%"
        resizeEffect="{myResize}"/>

    <mx:HBox 
        width="100%" height="20"
        horizontalAlign="center" id="buttonAction">
        <mx:Button id="saveButton"
            height="18"
            enabled="{this._virtualDataCenterAdd.isFormValid}"
            label="@Resource(bundle='Common', key='BUTTON_SAVE')"
            click="onClickButtonSave()"/>

        <mx:Button id="closeButton"
            height="18"
            label="@Resource(bundle='Common', key='BUTTON_CLOSE')"
            styleName="AlternativeButton"
            click="onClickButtonClose()"/>
    </mx:HBox>


    <mx:Spacer height="5"/>
</AbiCloudPopUp>
