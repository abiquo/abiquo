<?xml version="1.0" encoding="utf-8"?>
<!--

     Abiquo community edition
     cloud management application for hybrid clouds
     Copyright (C) 2008-2010 - Abiquo Holdings S.L.

     This application is free software; you can redistribute it and/or
     modify it under the terms of the GNU LESSER GENERAL PUBLIC
     LICENSE as published by the Free Software Foundation under
     version 3 of the License

     This software is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     LESSER GENERAL PUBLIC LICENSE v.3 for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the
     Free Software Foundation, Inc., 59 Temple Place - Suite 330,
     Boston, MA 02111-1307, USA.

-->

<mx:VBox 
    paddingBottom="15"
    paddingLeft="15"
    paddingRight="15"
    paddingTop="15"
    styleName="VirtualApplianceDeployingSkin"
    show="checkVirtualApplianceState()"
    creationComplete="onCreationComplete()"
    xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:info="net.undf.abicloud.view.general.components.info.*" xmlns:general="net.undf.abicloud.view.general.*">

    <mx:Script>
        <![CDATA[
        	import net.undf.abicloud.vo.virtualappliance.Timestamp;
        	import net.undf.abicloud.vo.virtualappliance.Task;
        	import net.undf.abicloud.vo.virtualappliance.Job;
        	import mx.collections.ArrayCollection;
        	import mx.controls.dataGridClasses.DataGridColumn;
        	import net.undf.abicloud.model.AbiCloudModel;
        	import net.undf.abicloud.controller.ThemeHandler;
        	import net.undf.abicloud.view.main.CommonAssets;
            import mx.controls.Alert;
            import mx.resources.ResourceBundle;
            import mx.resources.ResourceManager;

            import net.undf.abicloud.events.VirtualApplianceEvent;
            import net.undf.abicloud.vo.infrastructure.State;
            import net.undf.abicloud.vo.infrastructure.VirtualMachine;
            import net.undf.abicloud.vo.virtualappliance.Node;
            import net.undf.abicloud.vo.virtualappliance.NodeType;
            import net.undf.abicloud.vo.virtualappliance.NodeVirtualImage;
            import net.undf.abicloud.vo.virtualappliance.VirtualAppliance;

            //The VirtualAppliance that is being deployed
            [Bindable]
            private var _virtualAppliance:VirtualAppliance;

            [Bindable]
            private var _nodesRunning:int;

            [Bindable]
            private var _nodesStopped:int;

            [Bindable]
            private var _nodesNotDeployed:int;

            [ResourceBundle("Common")]
            private var rb:ResourceBundle;

            [ResourceBundle("VirtualAppliance")]
            private var rb2:ResourceBundle;
            
            private function onCreationComplete():void
            {
            	AbiCloudModel.getInstance().virtualApplianceManager.addEventListener("nodesUpdates",updateNodes);
            }
            
            //Force updating node task status
            private function updateNodes(event:Event):void
            {
            	if(nodesList && this._virtualAppliance)
            	{
	            	nodesList.dataProvider = this._virtualAppliance.nodes;
            	}
            }

            public function set virtualAppliance(value:VirtualAppliance):void
            {
                this._virtualAppliance = value;
                nodesList.dataProvider = this._virtualAppliance.nodes;

                if (visible)
                {
                    checkVirtualApplianceState();
                }
            }
            
            private function checkVirtualApplianceState():void
            {
                //Cleaning things
                this._nodesRunning = 0;
                this._nodesNotDeployed = 0;
                this._nodesStopped = 0;

                //Checking that we have a valid VirtualAppliance, and that its
                //Nodes list is retrieved
                if (this._virtualAppliance && this._virtualAppliance.state.description == State.LOCKED.description && this._virtualAppliance.nodes)
                {
                    //Checking Nodes' state
                    var length:int = this._virtualAppliance.nodes.length;
                    var i:int;
                    var node:Node;
                    for (i = 0; i < length; i++)
                    {
                        node = this._virtualAppliance.nodes.getItemAt(i) as Node;
                        //Switching between the different types of Nodes
                        switch (node.nodeType.id)
                        {
                            case NodeType.VIRTUALIMAGE:
                                //The state of this type of Node depends on its VirtualMachine
                                var virtualMachine:VirtualMachine = NodeVirtualImage(node).virtualMachine;
                                if (virtualMachine == null)
                                    this._nodesNotDeployed++;
                                else if (virtualMachine.state.description == State.ON.description)
                                    this._nodesRunning++;
                                else
                                    this._nodesStopped++;

                                break;
                        }
                    }

                    var deployedPercent:int = (this._nodesRunning / this._virtualAppliance.nodes.length) * 100;
                    deployProgressBar.percentWidth = deployedPercent;
                }
            }

            private function onClickForceRefreshStateButton():void
            {
                //Announcing that user wants to force refresh
                var virtualApplianceEvent:VirtualApplianceEvent = new VirtualApplianceEvent(VirtualApplianceEvent.FORCE_REFRESH_VIRTUAL_APPLIANCE_STATE);
                virtualApplianceEvent.virtualAppliance = this._virtualAppliance;
                dispatchEvent(virtualApplianceEvent);
            }        
            
            private function returnName(object:NodeVirtualImage, column:DataGridColumn):String
            {
                return object.name;
            }
            
            
            private function returnStatus(object:NodeVirtualImage, column:DataGridColumn):String
            {
                if(!this._virtualAppliance)
                {
                    return '';	
                }
                /***
                * We return for each node the state and the description of the action perfomed
                * Check order:
                *   - if any task is retrieved -> Processing
                *   - if a task is retrieved:
                *       - if the Virtual Appliance have a timestamp:
                *           -  if the Virtual Appliance timestamp > Task timestamp -> Processing
                *           -  if the Virtual Appliance timestamp < Task timestamp -> *Check Flow* 
                *       - if the Virtual Appliance doesn't have timestamp -> *Check Flow*
                * 
                * *Check Flow*
                *   - if task FINISHED_SUCCESSFULLY o FINISHED_UNSUCCESSFULLY o ABORTED -> task.state 
                *   - if a job as a different state that DONE and FAILED -> job.type + job.description
                *  
                * **/
                
                if(object.taskStatus.tasks.length == 0)
                {
                    return "Processing (no task)";	
                }
                else
                {
                	var timestamp:Timestamp = AbiCloudModel.getInstance().virtualApplianceManager.isTimestampUsed('virtualAppliance',this._virtualAppliance.id);
                	var task:Task = object.taskStatus.tasks.getItemAt(0) as Task;
                	if(timestamp)
                	{
                	   if(timestamp.timestamp > task.timestamp)
                	   {
                	   	   return "Processing (old timestamp)";
                	   }	
                	}
                	
                	if(task.state == Task.FINISHED_SUCCESSFULLY || task.state == Task.FINISHED_UNSUCCESSFULLY || task.state == Task.ABORTED)
                	{
                		return task.state;
                	}
                	else
                	{
                		var job:Job = returnNodeState(task.jobs);
	                    if(job)
	                    {
	                        return job.type + "(" + job.description + ")";
	                    }
	                    return "Finishing";
                	}
                	
                }
                
                return "Algo no va bien";
                
                //return resourceManager.getString('VirtualAppliance','LABEL_STATUS_' + object.taskStatus.statusName);
                
                
                //return Job(Task(object.taskStatus.tasks.getItemAt(0)).jobs.getItemAt(0)).type;
            }
            
            private function returnNodeState(jobs:ArrayCollection):Job
            {
                var job:Job;
                for(var i:int = 0 ; i < jobs.length ; i++)
                {
                    job = jobs.getItemAt(i) as Job;
                    if(job.state != Job.DONE && job.state != Job.FAILED)
                    {
                    	return job;
                    }	
                }
                return null;
            }
        ]]>
    </mx:Script>
    <mx:HBox width="100%" 
    	horizontalAlign="right"
    	includeInLayout="{AbiCloudModel.getInstance().configurationManager.config.client_wiki_vm_deployInfo.value != ''}"
    	visible="{AbiCloudModel.getInstance().configurationManager.config.client_wiki_vm_deployInfo.value != ''}">
    	<info:InfoIcon wikiUrl="{AbiCloudModel.getInstance().configurationManager.config.client_wiki_vm_deployInfo.value}"/>
    </mx:HBox>
    <mx:HBox 
        width="100%" height="100%"
        verticalAlign="top">
        <mx:VBox  
        	height="100%" 
        	verticalAlign="middle"
        	horizontalAlign="center">
			<mx:HBox
				width="100%"
				verticalAlign="middle"
				horizontalAlign="center"
				paddingRight="10"
				paddingBottom="10">
	            <mx:SWFLoader id="busyIcon"
	                width="60" height="60"
	                source="{ThemeHandler.getInstance().getImageFromStyle('VirtualApplianceBusyIcon')}"/>				
			</mx:HBox>
            <mx:Button
                height="18"
                label="@Resource(bundle='VirtualAppliance', key='LABEL_FORCE_REFRESH')"
                styleName="AlternativeButton"
                click="onClickForceRefreshStateButton()"/>
            <mx:Spacer height="40%"/>
                
        </mx:VBox>
        <!-- Animated icon, force refresh button and title -->


        <mx:VBox 
            width="100%" height="100%"
            verticalGap="3"
            verticalAlign="middle">

            <!-- VirtualAppliance title -->
            <mx:HBox horizontalGap="0">
                <mx:Label text="{ResourceManager.getInstance().getString('VirtualAppliance', 'LABEL_VIRTUAL_APPLIANCE')}"/>

                <mx:Label 
                    fontWeight="bold"
                    text="{this._virtualAppliance.name}"/>

                <mx:Label text="{ResourceManager.getInstance().getString('VirtualAppliance', 'LABEL_IN_PROGRESS')}"/>
            </mx:HBox>

            <!-- Node info -->
            <!--<mx:Label text="{ResourceManager.getInstance().getString('VirtualAppliance', 'LABEL_NUMBER_OF_NODES') + ' ' + this._virtualAppliance.nodes.length}"/>

            <mx:HRule width="100%"/>

            <mx:HBox 
                horizontalGap="0"
                includeInLayout="{this._virtualAppliance.state.description != State.LOCKED.description}"
                visible="{this._virtualAppliance.state.description != State.LOCKED.description}">
                <mx:Label text="{ResourceManager.getInstance().getString('VirtualAppliance', 'LABEL_NOT_DEPLOYED') + ': '}"/>
                <mx:Label 
                    fontSize="12"
                    text="{this._nodesNotDeployed.toString()}"/>
            </mx:HBox>

            <mx:HRule 
                width="100%"
                includeInLayout="{this._virtualAppliance.state.description != State.LOCKED.description}"
                visible="{this._virtualAppliance.state.description != State.LOCKED.description}"/>

            <mx:HBox 
                horizontalGap="0"
                includeInLayout="{this._virtualAppliance.state.description != State.LOCKED.description}"
                visible="{this._virtualAppliance.state.description != State.LOCKED.description}">
                <mx:Label text="{ResourceManager.getInstance().getString('VirtualAppliance', 'LABEL_STOPPED') + ': '}"/>
                <mx:Label 
                    fontSize="12"
                    text="{this._nodesStopped.toString()}"/>
            </mx:HBox>

            <mx:HRule 
                width="100%"
                includeInLayout="{this._virtualAppliance.state.description != State.LOCKED.description}"
                visible="{this._virtualAppliance.state.description != State.LOCKED.description}"/>

            <mx:HBox 
                horizontalGap="0"
                includeInLayout="{this._virtualAppliance.state.description != State.LOCKED.description}"
                visible="{this._virtualAppliance.state.description != State.LOCKED.description}">
                <mx:Label text="{ResourceManager.getInstance().getString('VirtualAppliance', 'LABEL_RUNNING') + ': '}"/>
                <mx:Label 
                    fontSize="12"
                    text="{this._nodesRunning.toString()}"/>
            </mx:HBox>-->

            <mx:HBox 
                width="100%"
                includeInLayout="{this._virtualAppliance.state.description == State.LOCKED.description}"
                visible="{this._virtualAppliance.state.description == State.LOCKED.description}">
                <mx:Label text="@Resource(bundle='VirtualAppliance', key='LABEL_UPDATING_NODES')"/>
            </mx:HBox>

            <mx:HRule width="100%"/>
        </mx:VBox>
    </mx:HBox>
    
    <general:GeneralSubPanel 
        width="100%" height="100%"
        verticalAlign="middle"
        title="Nodes Statuses">

        <mx:DataGrid id="nodesList"
            width="100%" height="190">
            <mx:columns>
                <mx:DataGridColumn 
                	headerText="Node"
                    labelFunction="returnName"/>
                 
                 <mx:DataGridColumn 
                    headerText="Status"
                    width="100"
                    labelFunction="returnStatus"/>

            </mx:columns>
        </mx:DataGrid>
    </general:GeneralSubPanel>

    <!-- Custom Progress Bar -->
    <mx:Canvas 
        width="100%" height="12"
        backgroundColor="#CCCCCC"
        borderColor="#666666"
        borderStyle="solid">
        <mx:ProgressBar id="deployProgressBar"
            width="0"
            top="-1" bottom="-1"
            barColor="#FE9608"
            trackHeight="14"
            minWidth="0" indeterminate="true" mode="event"
            visible="{this._virtualAppliance.state.description != State.LOCKED.description}"/>

        <mx:ProgressBar id="indeterminateDeployProgressBar"
            width="100%"
            top="-1" bottom="-1"
            barColor="#FE9608"
            indeterminateMoveInterval="30"
            trackHeight="14"
            minWidth="0" label="" labelPlacement="center" indeterminate="true"
            visible="{this._virtualAppliance.state.description == State.LOCKED.description}"/>
    </mx:Canvas>


</mx:VBox>
