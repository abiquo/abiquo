<?xml version="1.0" encoding="utf-8"?>
<!--

     Abiquo community edition
     cloud management application for hybrid clouds
     Copyright (C) 2008-2010 - Abiquo Holdings S.L.

     This application is free software; you can redistribute it and/or
     modify it under the terms of the GNU LESSER GENERAL PUBLIC
     LICENSE as published by the Free Software Foundation under
     version 3 of the License

     This software is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     LESSER GENERAL PUBLIC LICENSE v.3 for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the
     Free Software Foundation, Inc., 59 Temple Place - Suite 330,
     Boston, MA 02111-1307, USA.

-->

<mx:HBox 
    width="100%" height="100%"
    creationComplete="onCreationComplete()"
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:general="net.undf.abicloud.view.general.*"
    xmlns:privateip="net.undf.abicloud.view.networking.components.privateip.*">

    <mx:Metadata>
		[Event(name="selectedVLANChange", type="flash.events.Event")]
	</mx:Metadata>

    <mx:Script>
        <![CDATA[
        	import net.undf.abicloud.vo.user.PrivilegeType;
        	import net.undf.abicloud.utils.SecuredPrivilegeAccess;
        	import mx.collections.ArrayCollection;
            import mx.controls.Alert;
            import mx.core.Application;
            import mx.events.CloseEvent;
            import mx.managers.PopUpManager;
            import mx.resources.ResourceManager;

            import net.undf.abicloud.events.NetworkingEvent;
            import net.undf.abicloud.model.AbiCloudModel;
            import net.undf.abicloud.view.general.AbiCloudAlert;
            import net.undf.abicloud.view.networking.components.vlan.PrivateVLANFormAdd;
            import net.undf.abicloud.view.networking.components.vlan.PrivateVLANFormEdit;
            import net.undf.abicloud.vo.networking.VlanNetwork;
            import net.undf.abicloud.vo.virtualappliance.VirtualDataCenter;

            //PopUps
            private var vlanFormAdd:PrivateVLANFormAdd;

            private var vlanFormEdit:PrivateVLANFormEdit;

            //The VirtualDatacenter to manage its PrivateNetwork
            [Bindable]
            private var _virtualDatacenter:VirtualDataCenter;

            public function get virtualDatacenter():VirtualDataCenter
            {
                return _virtualDatacenter;
            }

            public function set virtualDatacenter(value:VirtualDataCenter):void
            {
                _virtualDatacenter = value;
                init();
            }

            //The VLAN that is currently selected
            [Bindable]
            private var _selectedVLAN:VlanNetwork;

            [Bindable(event="selectedVLANChange")]
            public function get selectedVLAN():VlanNetwork
            {
                return _selectedVLAN;
            }

            override protected function createChildren():void
            {
                
                //Creating PopUps
                vlanFormAdd = new PrivateVLANFormAdd();
                vlanFormAdd.addEventListener("vlanFormAddClose", closeVLANFormAdd)

                vlanFormEdit = new PrivateVLANFormEdit();
                vlanFormEdit.addEventListener("vlanFormEditClose", closeVLANFormEdit);
                
                AbiCloudModel.getInstance().networkingManager.addEventListener("vlanUpdated", getNetworksByVirtualDatacenter);
            }

            private function onCreationComplete():void
            {
                //Checking privilege
                SecuredPrivilegeAccess.checkElementAccess(PrivilegeType.VDC_MANAGE_NETWORK, "visible", networkTool);
                
                //Registering events from model
                AbiCloudModel.getInstance().networkingManager.addEventListener(NetworkingEvent.VLAN_DELETED,
                                                                               onVLANDeleted);
            }

            /**
             * Initializes this component to manage the VLANs from a VirtualDatacenter
             */
            private function init():void
            {
                _selectedVLAN = null;
				getNetworksByVirtualDatacenter();
                privateIPList.init(null, _virtualDatacenter, _selectedVLAN);
            }
            
            private function getNetworksByVirtualDatacenter(networkEvent:Event = null):void{
            	if(_virtualDatacenter && _virtualDatacenter.network){
	            	_virtualDatacenter.network.networks = new ArrayCollection();            		
            	}
            	//Private Vlan Networks
            	var event:NetworkingEvent = new NetworkingEvent(NetworkingEvent.GET_PRIVATE_NETWORKS_BY_VIRTUALDATACENTER);
            	event.virtualDatacenter = this._virtualDatacenter;
            	event.callback = populatePrivateNetworks;
            	if(this._virtualDatacenter){
	            	dispatchEvent(event);            		
            	}
            	
            	//External Vlan Networks
                event = new NetworkingEvent(NetworkingEvent.GET_EXTERNAL_NETWORKS_BY_VIRTUALDATACENTER);
                event.virtualDatacenter = this._virtualDatacenter;
                event.callback = populatePrivateNetworks;
                if(this._virtualDatacenter){
                    dispatchEvent(event);                   
                }
            }
            
            private function populatePrivateNetworks(networks:ArrayCollection):void{
            	_virtualDatacenter.network.networks.addAll(networks);
            	setDefaultNetwork(this._virtualDatacenter.defaultVlan,networks);
            }
            
            private function setDefaultNetwork(vlan:VlanNetwork, networks:ArrayCollection):void{
            	var testedVlan:VlanNetwork;
            	for(var i:int = 0 ; i < networks.length ; i++){
            		testedVlan = VlanNetwork(networks.getItemAt(i)) as VlanNetwork;
            		if(vlan.vlanNetworkId == testedVlan.vlanNetworkId){
            			testedVlan.defaultNetwork = true;
            		}else{
            			testedVlan.defaultNetwork = false;
            		}
            	}
            }

            private function onClickAllVLANLabel():void
            {
                vlanList.selectedIndex = -1;

                _selectedVLAN = null;
                dispatchEvent(new Event("selectedVLANChange"));

                privateIPList.init(null, _virtualDatacenter, _selectedVLAN);

            }

            private function onClickVLANList():void
            {
                if (vlanList.selectedIndex > -1)
                {
                    _selectedVLAN = vlanList.selectedItem as VlanNetwork;
                }
                else
                {
                    _selectedVLAN = null;
                }

                dispatchEvent(new Event("selectedVLANChange"));

                privateIPList.init(null, _virtualDatacenter, _selectedVLAN);
            }

            private function addVLAN():void
            {
                PopUpManager.addPopUp(vlanFormAdd, Application.application as DisplayObject,
                                      true);
                PopUpManager.centerPopUp(vlanFormAdd);

                vlanFormAdd.init(_virtualDatacenter);
            }

            private function closeVLANFormAdd(event:Event = null):void
            {
                PopUpManager.removePopUp(vlanFormAdd);
            }

            private function editVLAN():void
            {
                PopUpManager.addPopUp(vlanFormEdit, Application.application as DisplayObject,
                                      true);
                PopUpManager.centerPopUp(vlanFormEdit);

                vlanFormEdit.init(_virtualDatacenter, _selectedVLAN);
            }

            private function closeVLANFormEdit(event:Event = null):void
            {
                PopUpManager.removePopUp(vlanFormEdit);
            }

            private function askVLANDeletion():void
            {
                if (_selectedVLAN.defaultNetwork)
                {
                    //The default VLAN cannot be deleted
                    AbiCloudAlert.showError(ResourceManager.getInstance().getString("Common",
                                                                                    "ALERT_TITLE_LABEL"),
                                            ResourceManager.getInstance().getString("Networking",
                                                                                    "ALERT_VLAN_DELETE_HEADER")+" '"+_selectedVLAN.networkName+"'",
                                            ResourceManager.getInstance().getString("Networking",
                                                                                    "ALERT_UNABLE_DELETE_DEFAULT_VLAN_TEXT"),
                                            Alert.OK);
                }
                else if (_selectedVLAN.networkType == VlanNetwork.EXTERNAL)
                {
                    //The external VLAN cannot be deleted
                    AbiCloudAlert.showError(ResourceManager.getInstance().getString("Common",
                                                                                    "ALERT_TITLE_LABEL"),
                                            ResourceManager.getInstance().getString("Networking",
                                                                                    "ALERT_VLAN_DELETE_HEADER")+" '"+_selectedVLAN.networkName+"'",
                                            ResourceManager.getInstance().getString("Networking",
                                                                                    "ALERT_UNABLE_DELETE_EXTERNAL_VLAN_TEXT"),
                                            Alert.OK);
                }
                else
                {
                    //Asking user to confirm VLAN deletion
                    AbiCloudAlert.showAlert(ResourceManager.getInstance().getString("Common",
                                                                                    "ALERT_TITLE_LABEL"),
                                            ResourceManager.getInstance().getString("Networking",
                                                                                    "ALERT_VLAN_DELETE_HEADER")+" '"+_selectedVLAN.networkName+"'",
                                            ResourceManager.getInstance().getString("Networking",
                                                                                    "ALERT_VLAN_DELETE_TEXT"),
                                            Alert.YES | Alert.NO, deleteVLAN);
                }
            }

            private function deleteVLAN(closeEvent:CloseEvent):void
            {
                if (closeEvent.detail == Alert.YES)
                {
                    var event:NetworkingEvent = new NetworkingEvent(NetworkingEvent.DELETE_VLAN);
                    event.virtualDatacenter = _virtualDatacenter;
                    event.network = _virtualDatacenter.network;
                    event.vlanNetwork = _selectedVLAN;
                    dispatchEvent(event);
                }
            }

            private function onVLANDeleted(networkingEvent:NetworkingEvent):void
            {
                if (_selectedVLAN == networkingEvent.vlanNetwork)
                {
                    //The selected VLAN no longer exists
                    _selectedVLAN = null;
                    dispatchEvent(new Event("selectedVLANChange"));

                    privateIPList.init(null, _virtualDatacenter, _selectedVLAN);
                }
            }
        ]]>
    </mx:Script>

    <!-- VirtualDatacenter Private VLANs -->
    <general:GeneralSubPanel 
        width="200" height="100%"
        verticalAlign="middle"
        verticalGap="0"
        title="@Resource(bundle='Networking', key='LABEL_NETWORKS')">

        <mx:HBox 
            width="100%" height="23"
            horizontalGap="2"
            paddingLeft="5"
            paddingRight="10"
            verticalAlign="middle"
            styleName="GeneralDataPanelTopFullSkin"
            buttonMode="true"
            useHandCursor="true"
            mouseChildren="false"
            click="onClickAllVLANLabel()">
            <mx:Label 
				styleName="PrivateNetworkManagementLabel1"
                maxWidth="160"
                text="@Resource(bundle='Networking', key='LABEL_ALL')"/>
        </mx:HBox>

        <mx:List id="vlanList"
            width="100%" height="100%"
            borderStyle="none"
            labelField="networkName"
            dataProvider="{_virtualDatacenter.network.networks}"
            itemRenderer="net.undf.abicloud.view.networking.virtualdatacenter.privatenetwork.VLANListItemRenderer"
            click="onClickVLANList()"/>

        <general:GeneralSubPanelToolBox width="100%">
        	<mx:HBox id="networkTool" 
        		width="100%" verticalAlign="middle">        		
	            <mx:Button id="addVLANButton"
	                enabled="{_virtualDatacenter != null}" styleName="AddButton"
	                toolTip="@Resource(bundle='Common', key='BUTTON_NEW_TOOLTIP')"
	                click="addVLAN()"/>
	
	            <mx:Button id="deleteVLANButton"
	                enabled="{_selectedVLAN != null}" styleName="RemoveButton"
	                toolTip="@Resource(bundle='Common', key='BUTTON_DEL_TOOLTIP')"
	                click="askVLANDeletion()"/>
	            <mx:Spacer 
	                width="100%" height="10"/>
	
	            <mx:Button id="editVirtualDataCenterButton"
	                styleName="ConfigurationButton"
	                enabled="{_selectedVLAN != null}"
	                click="editVLAN()"/>
        	</mx:HBox>
        </general:GeneralSubPanelToolBox>
    </general:GeneralSubPanel>

    <!-- Private IPs -->
    <general:GeneralSubPanel 
        width="100%" height="100%"
        verticalAlign="middle"
        verticalGap="-1"
        title="@Resource(bundle='Networking', key='LABEL_PRIVATE_IPS')">

        <privateip:PrivateIPList id="privateIPList"/>

    </general:GeneralSubPanel>
</mx:HBox>
