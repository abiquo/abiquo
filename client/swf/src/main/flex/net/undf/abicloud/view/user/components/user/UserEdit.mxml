<?xml version="1.0" encoding="utf-8"?>
<!--

     Abiquo community edition
     cloud management application for hybrid clouds
     Copyright (C) 2008-2010 - Abiquo Holdings S.L.

     This application is free software; you can redistribute it and/or
     modify it under the terms of the GNU LESSER GENERAL PUBLIC
     LICENSE as published by the Free Software Foundation under
     version 3 of the License

     This software is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     LESSER GENERAL PUBLIC LICENSE v.3 for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the
     Free Software Foundation, Inc., 59 Temple Place - Suite 330,
     Boston, MA 02111-1307, USA.

-->

<AbiCloudPopUp 
    xmlns="net.undf.abicloud.view.general.*"
    xmlns:mx="http://www.adobe.com/2006/mxml"
    titleText="@Resource(bundle='User', key='POPUP_TITLE_USEREDIT')" 
    creationComplete="onCreationComplete()"
    wikiUrl="{AbiCloudModel.getInstance().configurationManager.config.client_wiki_user_createUser.value}"
    xmlns:virtualdatacenter="net.undf.abicloud.view.user.components.user.virtualdatacenter.*">

    <mx:Metadata>
		[Event(name="userEditClose", type="flash.events.Event")]		
	</mx:Metadata>


    <mx:Script>
        <![CDATA[
        	import net.undf.abicloud.vo.result.ListRequest;
        	import net.undf.abicloud.vo.user.PrivilegeType;
        	import net.undf.abicloud.utils.SecuredPrivilegeAccess;
        	import net.undf.abicloud.vo.user.Role;
        	import mx.managers.PopUpManager;
        	import net.undf.abicloud.utils.AbicloudUtils;
        	import mx.binding.utils.ChangeWatcher;
        	import net.undf.abicloud.vo.virtualappliance.VirtualDataCenter;
        	import net.undf.abicloud.events.VirtualApplianceEvent;
        	import mx.binding.utils.BindingUtils;
            import net.undf.abicloud.vo.user.Enterprise;
            import mx.resources.ResourceBundle;
            import mx.resources.ResourceManager;
            import mx.utils.ObjectUtil;
            import net.undf.abicloud.business.managers.UserManager;
            import mx.collections.ArrayCollection;
            import net.undf.abicloud.events.UserEvent;
            import net.undf.abicloud.vo.user.Role;
            import net.undf.abicloud.vo.user.User;
            import net.undf.abicloud.model.AbiCloudModel;
            import com.adobe.crypto.MD5;

            //Flag to indicate when this component is listening for new user creation
            private var _listenerRegistered:Boolean;

            //The user to edit
            [Bindable]
            private var _userToEdit:User;

            [ResourceBundle("User")]
            private var rb:ResourceBundle;
            
            //List of virtual data center
            [Bindable]
            public var virtualDataCenterList:ArrayCollection;
            
            private var _firstRetrieve:Boolean;
            
             //Need to know if it's a user who edits is own data
            [Bindable]
            private var _isUserEditing:Boolean;
            
			[Bindable]
			private var _virtualDatacenterWatcher:ChangeWatcher;
            
            [Bindable]
            private var _restrict:Boolean;
            
            [Bindable]
            private var _vdcAllowed:Boolean;


            private function onCreationComplete():void{

            }
            /**
             * Initializes this form to create a new user
             **/
            public function init(user:User, role:Boolean):void
            {
            	this._vdcAllowed = true;
                this._userToEdit = user;
                this._isUserEditing = role;

                enterpriseInput.text = this._userToEdit.enterprise.name;
                nameInput.text = this._userToEdit.name;
                surnameInput.text = this._userToEdit.surname;
                roleInput.selectedIndex = -1;
                roleInput.prompt = this._userToEdit.role.name;
                userInput.text = this._userToEdit.user;
                
                //Now user will be able to modify all the information without changing the pass
                //passwordInput.text = this._userToEdit.pass;
                //passwordRepeatInput.text = this._userToEdit.pass;
                oldPasswordInput.text = '';

                passwordInput.text = '';
                passwordRepeatInput.text = '';
                emailInput.text = this._userToEdit.email;
                descriptionInput.text = this._userToEdit.description;
                activeInput.selected = this._userToEdit.active;

                _listenerRegistered = false;
                labelPasswordInvalid.visible = false;
                labelOldPasswordInvalid.visible = true;
                currentPassword.enabled = true;
                acceptButton.enabled = false;
                
                //Hide fields in case of LDAP
                updateLDAPFields();
                
                virtualDatacenterList.listOfSelectedVirtualDatacenter = new ArrayCollection();
                this._restrict = false;

                //With roles with extra privilegies is not needed to check the current password
                //of each user
                if (AbiCloudModel.getInstance().loginManager.user.id != _userToEdit.id)
                {
                    oldPasswordInput.text = _userToEdit.pass;
                    labelOldPasswordInvalid.visible = false;
                    currentPassword.enabled = false;
                    requestPrivilege(this._userToEdit.role);
                    checkRoleAccess(this._userToEdit.role);
                }

                nameInput.setFocus();
                validateForm();
                
                //In case that any VDC exists, we need to call just one time the retrieve vdc list
                this._firstRetrieve = true;
                
                requestRoles();
            }
            
            /**
             * Hide/Show password fields depending on LDAP
             */
            private function updateLDAPFields():void{
            	var showPassword:Boolean = this._userToEdit.authType == User.ABIQUO;
            	currentPassword.visible = showPassword;
            	currentPassword.includeInLayout = showPassword;
            	newPassword.visible = showPassword;
            	newPassword.includeInLayout = showPassword;
            	repeatPassword.visible = showPassword;
            	repeatPassword.includeInLayout = showPassword;            	
            }
            
            /**
             * Retrieves the list of available VirtualDatacenters
             */
            private function createVirtualDataCenterList(value:ArrayCollection = null):void{
        		if(this._firstRetrieve){
            		var event:VirtualApplianceEvent = new VirtualApplianceEvent(VirtualApplianceEvent.GET_VIRTUAL_DATACENTERS_BY_ENTERPRISE);
            		event.enterprise = this._userToEdit.enterprise;
            		dispatchEvent(event);            		
            		this._firstRetrieve = false;           		
            	}else{
            		populateSelectedRestrictedVirtualDatacenters(value);
            	}
            }  
            
            /**
             * Populates the list of restricted VirtualDatacenters
             */
            private function populateSelectedRestrictedVirtualDatacenters(value:ArrayCollection):void{
            	virtualDataCenterList = value;
            		
            	var allowedVirtualDataCenter:Object;
            	           
            	for(var i:int = 0 ; i < value.length ; i++){           		

            		if(virtualDataCenterAlreadySelected(VirtualDataCenter(value.getItemAt(i)).id)){
            			virtualDatacenterList.listOfSelectedVirtualDatacenter.addItem(VirtualDataCenter(value.getItemAt(i)).id);
            		}     	
            	}
            	
            	//if we add restricted VDC, we show the list
            	if(virtualDatacenterList.listOfSelectedVirtualDatacenter.length > 0){
            		this._restrict = true;
            	}
            }          	
            
            /**
             * To set the list of available virtual datacenters
             **/
            private function virtualDataCenterAlreadySelected(id:int):Boolean{
            	if(!this._userToEdit.availableVirtualDatacenters){
            		return false;
            	}
            	for(var i:int = 0 ; i < this._userToEdit.availableVirtualDatacenters.length ; i++){
            		if(this._userToEdit.availableVirtualDatacenters[i] == id){
            			return true;
            		}            		
            	}
            	return false;
            }

            /**
             * To save the new user
             **/
            private function onAccept():void
            {
                //We do not change the original user until changes are saved in server
                var userCopy:User = ObjectUtil.copy(this._userToEdit) as User;

                userCopy.name = nameInput.text;
                userCopy.surname = surnameInput.text;

                if (roleInput.selectedIndex > -1)
                    userCopy.role = roleInput.selectedItem as Role;

                userCopy.user = userInput.text;

                //Only if passwordInput > 0 else copy the current password
                if (passwordInput.text.length > 0)
                {
                    userCopy.pass = passwordInput.text;
                }
                else
                {
                    userCopy.pass = null;
                }

                userCopy.email = emailInput.text;
                userCopy.description = descriptionInput.text;
                userCopy.active = activeInput.selected;
                if(!this._isUserEditing){
                	userCopy.availableVirtualDatacenters = virtualDatacenterList.listOfSelectedVirtualDatacenter.toArray();
                }

                //Registering listener, if it is not, to know when the user has been created
                if (!this._listenerRegistered)
                {
                    AbiCloudModel.getInstance().userManager.addEventListener(UserEvent.USERS_EDITED,
                                                                             onUserEdited);
                    this._listenerRegistered = true;
                }

                //Announcing that user wants to edit a user
                var userEvent:UserEvent = new UserEvent(UserEvent.EDIT_USERS);
                var users:ArrayCollection = new ArrayCollection();
                users.addItem(userCopy);
                var oldUsers:ArrayCollection = new ArrayCollection();
                oldUsers.addItem(this._userToEdit);

                userEvent.users = users;
                userEvent.oldUsers = oldUsers;

                dispatchEvent(userEvent);

                //Closing the form
                //onCancel();
            }
            

            /**
             * Cancels the User Creation
             **/
            private function onCancel():void
            {
                //Unregistering listener, if registered
                if (this._listenerRegistered)
                    AbiCloudModel.getInstance().userManager.removeEventListener(UserEvent.USERS_EDITED,
                                                                                onUserEdited);
				if(_virtualDatacenterWatcher)
					_virtualDatacenterWatcher.unwatch();
				
                dispatchEvent(new Event("userEditClose"));
            }

            /**
             * Handler for success in new user creation
             **/
            private function onUserEdited(event:UserEvent):void
            {
            	//we update logged user data if necessary
            	updateLoggedUser(event.users);
                //Now that user has been successfully created, we can close this Pop Up
                onCancel();
            }
            
            /**
             * Update logged user data
             **/
            private function updateLoggedUser(listOfUsers:ArrayCollection):void
            {
            	var loggedUser:User = AbiCloudModel.getInstance().loginManager.user;
            	var user:User;
            	if(listOfUsers){
            		for(var i:int = 0 ; i < listOfUsers.length ; i++){
            			user = listOfUsers.getItemAt(i) as User;
            			if(loggedUser.id == user.id){
            				AbiCloudModel.getInstance().loginManager.user = user;
            				return;
            			}
            		}
            	}
            	
            }

            /**
             * Activates the Accept Button if the form is valid
             **/
            private function validateForm():void
            {
                //If ALL is typed!!
                if (nameInput.text.length > 0 && surnameInput.text.length > 0 && emailInput.text.length > 0)
                {                    
                    //If the LDAP mode is on, we don't check password fields
                    if(this._userToEdit.authType == User.ABIQUO){
                    	//If the user who edits is different thank users to edit don't need to type the
	                    //current password
	                    if (AbiCloudModel.getInstance().loginManager.user.id != _userToEdit.id)
	                    {
	                        //If type one or other password Input text, need to assure that it is
	                        //the same value. Maybe user don't want to change the password
	                        if (passwordInput.text.length > 0 || passwordRepeatInput.text.length > 0)
	                        {
	                            //New password == New Password repeat typed by user
	                            if (passwordInput.text == passwordRepeatInput.text)
	                            {
	                                labelPasswordInvalid.visible = false;
	                                acceptButton.enabled = true;
	                            }
	                            else
	                            {
	                                labelPasswordInvalid.visible = true;
	                                acceptButton.enabled = false;
	                            }
	                        }
	                        else
	                        {
	                            labelPasswordInvalid.visible = false;
	                            acceptButton.enabled = true;
	                        }
	                            //If user who edits == users to edit
	                    }
	                    else
	                    {
	                        //This user ALWAYS has to type the current password to apply the changes
	                        if (this._userToEdit.pass == MD5.hash(oldPasswordInput.text))
	                        {
	                            //Maybe user don't want to change the password
	                            if (passwordInput.text.length > 0 || passwordRepeatInput.text.length > 0)
	                            {
	                                labelOldPasswordInvalid.visible = false;
	                                //New password == New Password repeat typed by user
	                                if (passwordInput.text == passwordRepeatInput.text)
	                                {
	                                    labelPasswordInvalid.visible = false;
	                                    acceptButton.enabled = true;
	                                }
	                                else
	                                {
	                                    labelPasswordInvalid.visible = true;
	                                    acceptButton.enabled = false;
	                                }
	                            }
	                            else
	                            {
	                                labelOldPasswordInvalid.visible = false;
	                                acceptButton.enabled = true;
	                            }
	
	                        }
	                        else
	                        {
	                            labelOldPasswordInvalid.visible = true;
	                            acceptButton.enabled = false;
	                        }	
	                    }
                    }else{
                    	acceptButton.enabled = true;
                    }
                    emailValidator.validate();
                }
                else
                {
                    acceptButton.enabled = false;
                }
            }

            [Bindable]
            private var _roleEditable:Boolean = true;

            public function set roleEditable(value:Boolean):void
            {
                this._roleEditable = value;
            }

            [Bindable]
            private var _activeEditable:Boolean = true;

            public function set activeEditable(value:Boolean):void
            {
                this._activeEditable = value;
            }

            /**
             * Basic behaivour is as follows:
             * If user presses the Enter, in any part of this Pop Up (except buttons), it would be
             * like Accept Button has been pressed
             */
            override protected function keyboardHandler(keyboardEvent:KeyboardEvent):void
            {
                if (keyboardEvent.target == acceptButton || keyboardEvent.target == cancelButton)
                    super.keyboardHandler(keyboardEvent);
                else
                {
                    if (keyboardEvent.keyCode == 13 && acceptButton.enabled)
                        onAccept();
                }
            }
            
            /**
             * Show/hide the list of virtualdatacenter
             */
            private function showHideRestrict():void{
            	
            	this._restrict = ! this._restrict;
            	//We remove all selected VDC
            	if(!this._restrict){
            		virtualDatacenterList.listOfSelectedVirtualDatacenter = new ArrayCollection();
            	}else{
            		//we display again the restricted virtual datacenter
            		populateSelectedRestrictedVirtualDatacenters(AbiCloudModel.getInstance().virtualApplianceManager.virtualDataCenters);            		
            		virtualDatacenterList.refreshCheckbox();
            	}
            	PopUpManager.centerPopUp(this);
            }
            
            private function requestRoles():void{
            	var roleListOptions:ListRequest = new ListRequest();
                roleListOptions.offset = 0;
                roleListOptions.numberOfNodes = 10000;
                roleListOptions.filterLike = "";
                roleListOptions.asc = true;
                roleListOptions.orderBy = "enterprise";            	
            	
            	var roleEvent:UserEvent = new UserEvent(UserEvent.GET_ROLES);
           		roleEvent.enterprise = this._userToEdit.enterprise;
            	roleEvent.roleListOptions = roleListOptions;
            	dispatchEvent(roleEvent);
            }
            
            private function requestPrivilege(role:Role = null):void{
            	var event:UserEvent = new UserEvent(UserEvent.CHECK_ROLE_PRIVILEGE);
            	if(role){
            		event.role = role;
            	}else{
            		event.role = roleInput.selectedItem as Role;
            	}            	
            	event.privilege = PrivilegeType.USERS_PROHIBIT_VDC_RESTRICTION;
            	event.callback = setRestrictedVDC;
            	dispatchEvent(event);
            	validateForm();
            }
            
            private function setRestrictedVDC(value:Boolean):void{
            	this._vdcAllowed = value;	
            	if(!this._vdcAllowed){
            		this._firstRetrieve = true;
            		if( !_virtualDatacenterWatcher || !_virtualDatacenterWatcher.isWatching()){
	            		//Retrieve the list of virtual datacenter if you are not a Simple User
	                	_virtualDatacenterWatcher = BindingUtils.bindSetter(createVirtualDataCenterList,AbiCloudModel.getInstance().virtualApplianceManager,"virtualDataCenters");	
            		}else{
            			createVirtualDataCenterList();
            		}            		
            	}
            }
            
            private function checkRoleAccess(role:Role):void{
                var event:UserEvent = new UserEvent(UserEvent.CHECK_ROLE_ACCESS);
                event.role = role;
                event.callback = setRestrictedRoleAccess;
                dispatchEvent(event);
            }
            
            private function setRestrictedRoleAccess(value:Boolean):void{
                roleInput.enabled = value;
            }
        ]]>
    </mx:Script>
    
     <mx:EmailValidator id="emailValidator"
    	source="{emailInput}" 
    	property="text" required="true" 
    	trigger="{emailInput}"
    	triggerEvent="change" 
    	invalid="invalidEmail.visible = true ; acceptButton.enabled = false"
    	valid="invalidEmail.visible = false"/>

    <mx:Form paddingTop="3" width="100%">

        <mx:FormItem label="@Resource(bundle='User', key='LABEL_ENTERPRISE')"
        	visible="{!this._isUserEditing}"
        	includeInLayout="{!this._isUserEditing}">
            <mx:TextInput id="enterpriseInput"
                height="20"
                editable="false"/>
        </mx:FormItem>

        <mx:FormItem 
            label="@Resource(bundle='User', key='TEXTINPUT_LABEL_NAME')"
            required="true">
            <mx:TextInput id="nameInput"
                height="20"
                maxChars="29"
                change="validateForm()"/>
        </mx:FormItem>

        <mx:FormItem 
            label="@Resource(bundle='User', key='TEXTINPUT_LABEL_SURNAME')"
            required="true">
            <mx:TextInput id="surnameInput"
                height="20"
                maxChars="49"
                change="validateForm()"/>
        </mx:FormItem>

        <mx:FormItem 
            label="@Resource(bundle='User', key='LABEL_ROLE')"
            required="true"
            visible="{!this._isUserEditing}"
        	includeInLayout="{!this._isUserEditing}">
            <mx:ComboBox id="roleInput"
                height="18"
                change="requestPrivilege()"
                dataProvider="{AbiCloudModel.getInstance().userManager.roles}"
                labelField="name" enabled="{this._roleEditable}"/>
        </mx:FormItem>

		 <mx:FormItem 
        	id="vdcFormItem"
        	direction="horizontal"
            label="@Resource(bundle='User', key='LABEL_ALLOWED_VIRTUAL_DATACENTER')"            
            visible="{!this._vdcAllowed}"
            includeInLayout="{!this._vdcAllowed}">
            <mx:VBox verticalAlign="middle"
            	visible="{this._restrict}"
            	includeInLayout="{this._restrict}">
            	<mx:HBox verticalAlign="middle">
	            	<mx:Image
			    		id="alertIcon"
			    		toolTip="@Resource(bundle='User',key='TOOLTIP_RESTRICT_ACCESS')"
			    		creationComplete="AbicloudUtils.getImageFromStyle('CommonAssetsAlert', alertIcon)"/>
	            	<mx:Label text="@Resource(bundle='User',key='LABEL_ALLOWED_VDC')"  
	            		styleName="DataCenterCreationWarning"/>            		
            	</mx:HBox>
	            <virtualdatacenter:AvailableVirtualDatacenterList 
	            	toolTip="@Resource(bundle='User',key='TOOLTIP_RESTRICT_ACCESS')"
	            	id="virtualDatacenterList" 
	            	rowCount="4"
	            	dataProvider="{virtualDataCenterList}"
	            	visible="{this._restrict}"
	            	includeInLayout="{this._restrict}"
	            	width="100%"/> 	
            </mx:VBox>
        	<mx:Button 
        		id="hideButton"
        		height="18"
        		label="{this._restrict ? resourceManager.getString('User','BUTTON_DONT_RESTRICT_ACCESS'):resourceManager.getString('User','BUTTON_RESTRICT_ACCESS')}"
        		click="showHideRestrict()"/>
        </mx:FormItem>
        
        <mx:FormItem 
            label="@Resource(bundle='User', key='TEXTINPUT_LABEL_USER')"
            direction="horizontal"
            required="true"
            visible="{!this._isUserEditing}"
        	includeInLayout="{!this._isUserEditing}">
            <mx:TextInput id="userInput"
                height="20"
                maxChars="128"
                change="validateForm()"
                editable="false"/>
        </mx:FormItem>


        <mx:FormItem id="currentPassword"
            label="@Resource(bundle='User', key='TEXTINPUT_LABEL_OLDPASSWORD')"
            direction="horizontal"
            required="true">
            <mx:TextInput id="oldPasswordInput"
                height="20"
                maxChars="14"
                change="validateForm()"
                displayAsPassword="true"/>

            <mx:Label id="labelOldPasswordInvalid"
                color="#FF0000"
                fontWeight="bold"
                text="@Resource(bundle='User', key='LABEL_OLDPASSWORDINVALID')"/>
        </mx:FormItem>

        <mx:FormItem id="newPassword"
            label="@Resource(bundle='User', key='TEXTINPUT_LABEL_NEWPASSWORD')"
            required="false">
            <mx:TextInput id="passwordInput"
                height="20"
                maxChars="14"
                change="validateForm()"
                displayAsPassword="true"/>
        </mx:FormItem>

        <mx:FormItem id="repeatPassword"
            label="@Resource(bundle='User', key='TEXTINPUT_LABEL_PASSWORDREPEAT')"
            direction="horizontal"
            required="false">
            <mx:TextInput id="passwordRepeatInput"
                height="20"
                maxChars="14"
                change="validateForm()"
                displayAsPassword="true"/>

            <mx:Label id="labelPasswordInvalid"
                color="#FF0000"
                fontWeight="bold"
                text="@Resource(bundle='User', key='LABEL_PASSWORDINVALID')"/>
        </mx:FormItem>

        <mx:FormItem 
            label="@Resource(bundle='User', key='TEXTINPUT_LABEL_EMAIL')"
            required="true" direction="horizontal">
            <mx:TextInput id="emailInput"
                height="20"
                maxChars="200"
                change="validateForm()"/>
            <mx:Label id="invalidEmail"
            	color="#FF0000"
                fontWeight="bold" 
                text="@Resource(bundle='User',key='LABEL_EMAIL_INVALID')"
            	visible="false"/>
        </mx:FormItem>

        <mx:FormItem label="@Resource(bundle='User', key='TEXTINPUT_LABEL_DESCRIPTION')"
        	visible="{!this._isUserEditing}"
        	includeInLayout="{!this._isUserEditing}">
            <mx:TextArea id="descriptionInput"
                maxChars="99"/>
        </mx:FormItem>

        <mx:FormItem label="@Resource(bundle='User', key='LABEL_ACTIVATED')"
        	visible="{!this._isUserEditing}"
        	includeInLayout="{!this._isUserEditing}">
            <mx:CheckBox id="activeInput"
                enabled="{this._activeEditable}"/>
        </mx:FormItem>

        <!-- BUTTONS -->
        <mx:FormItem direction="horizontal">
            <mx:Button id="acceptButton"
                height="18"
                label="@Resource(bundle='Common', key='BUTTON_ACCEPT')"
                click="onAccept()"/>

            <mx:Button id="cancelButton"
                height="18"
                label="@Resource(bundle='Common', key='BUTTON_CANCEL')"
                styleName="AlternativeButton"
                click="onCancel()"/>
        </mx:FormItem>
    </mx:Form>
</AbiCloudPopUp>
