<?xml version="1.0" encoding="utf-8"?>
<!--

     Abiquo community edition
     cloud management application for hybrid clouds
     Copyright (C) 2008-2010 - Abiquo Holdings S.L.

     This application is free software; you can redistribute it and/or
     modify it under the terms of the GNU LESSER GENERAL PUBLIC
     LICENSE as published by the Free Software Foundation under
     version 3 of the License

     This software is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     LESSER GENERAL PUBLIC LICENSE v.3 for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the
     Free Software Foundation, Inc., 59 Temple Place - Suite 330,
     Boston, MA 02111-1307, USA.

-->

<EventMap 
    xmlns="http://mate.asfusion.com/"
    xmlns:mx="http://www.adobe.com/2006/mxml">
    <mx:Script>
        <![CDATA[
            import net.undf.abicloud.model.AbiCloudModel;
            import net.undf.abicloud.controller.FaultHandler;
            import net.undf.abicloud.events.MeteringEvent;
            import net.undf.abicloud.business.Services;
            import net.undf.abicloud.utils.ScreenBlocker;

            [Bindable]
            private var services:Services = new Services();
        ]]>
    </mx:Script>

    <!-- MeteringEvent.GET_EVENT_TYPES _____________________________________________________ -->
    <EventHandlers type="{MeteringEvent.GET_EVENT_TYPES}">

        <!-- Blocking screen -->
        <InlineInvoker method="ScreenBlocker.blockScreen"/>

        <!-- Make call to the server here -->

        <RemoteObjectInvoker instance="{services.meteringService}"
            method="getEventTypes"
            arguments="{[AbiCloudModel.getInstance().loginManager.session]}">

            <resultHandlers>
                <MethodInvoker generator="{MeteringResultHandler}"
                    method="getEventTypesResultHandler"
                    arguments="{[resultObject]}"/>

                <!-- Unblock screen -->
                <InlineInvoker method="ScreenBlocker.unblockScreen"/>
            </resultHandlers>

            <faultHandlers>
                <MethodInvoker generator="{FaultHandler}"
                    method="handleFault"
                    arguments="{[fault]}"/>

                <!-- Unblock screen -->
                <InlineInvoker method="ScreenBlocker.unblockScreen"/>
            </faultHandlers>

        </RemoteObjectInvoker>

    </EventHandlers>


    <!-- MeteringEvent.GET_SEVERITY_TYPES _____________________________________________________ -->
    <EventHandlers type="{MeteringEvent.GET_SEVERITY_TYPES}">

        <!-- Blocking screen -->
        <InlineInvoker method="ScreenBlocker.blockScreen"/>

        <!-- Make call to the server here -->

        <RemoteObjectInvoker instance="{services.meteringService}"
            method="getSeverityTypes"
            arguments="{[AbiCloudModel.getInstance().loginManager.session]}">

            <resultHandlers>
                <MethodInvoker generator="{MeteringResultHandler}"
                    method="getSeverityTypesResultHandler"
                    arguments="{[resultObject]}"/>

                <!-- Unblock screen -->
                <InlineInvoker method="ScreenBlocker.unblockScreen"/>
            </resultHandlers>

            <faultHandlers>
                <MethodInvoker generator="{FaultHandler}"
                    method="handleFault"
                    arguments="{[fault]}"/>

                <!-- Unblock screen -->
                <InlineInvoker method="ScreenBlocker.unblockScreen"/>
            </faultHandlers>

        </RemoteObjectInvoker>

    </EventHandlers>

    <!-- MeteringEvent.GET_EVENTS_FILTERED _____________________________________________________ -->
    <EventHandlers type="{MeteringEvent.GET_EVENTS_FILTERED}">

       <InlineInvoker method="{AbiCloudModel.getInstance().meteringManager.setInProgress}"
            arguments="{[MeteringEvent.GET_EVENTS_FILTERED, true]}"/>

        <!-- Make call to the server here -->

        <RemoteObjectInvoker instance="{services.meteringService}"
            method="getMeters"
            arguments="{[AbiCloudModel.getInstance().loginManager.session, event.filter, event.maxResults]}">

            <resultHandlers>
                <MethodInvoker generator="{MeteringResultHandler}"
                    method="getEventsFilteredResultHandler"
                    arguments="{[resultObject]}"/>

                <InlineInvoker method="{AbiCloudModel.getInstance().meteringManager.setInProgress}"
                           arguments="{[MeteringEvent.GET_EVENTS_FILTERED, false]}"/>
            </resultHandlers>

            <faultHandlers>
                <MethodInvoker generator="{FaultHandler}"
                    method="handleFault"
                    arguments="{[fault]}"/>

                <InlineInvoker method="{AbiCloudModel.getInstance().meteringManager.setInProgress}"
                          arguments="{[MeteringEvent.GET_EVENTS_FILTERED, false]}"/>
            </faultHandlers>

        </RemoteObjectInvoker>

    </EventHandlers>
</EventMap>
