<?xml version="1.0" encoding="utf-8"?>
<!--

     Abiquo community edition
     cloud management application for hybrid clouds
     Copyright (C) 2008-2010 - Abiquo Holdings S.L.

     This application is free software; you can redistribute it and/or
     modify it under the terms of the GNU LESSER GENERAL PUBLIC
     LICENSE as published by the Free Software Foundation under
     version 3 of the License

     This software is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     LESSER GENERAL PUBLIC LICENSE v.3 for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the
     Free Software Foundation, Inc., 59 Temple Place - Suite 330,
     Boston, MA 02111-1307, USA.

-->

<mx:VBox 
    width="100%" height="100%"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="10"
    verticalGap="0"
    creationComplete="onCreationComplete()"
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:utils="net.undf.abicloud.utils.*"
    xmlns:general="net.undf.abicloud.view.general.*"
    xmlns:virtualappliance="net.undf.abicloud.view.virtualappliance.components.virtualappliance.*">

    <mx:Metadata>
		[Event(name="virtualApplianceSelected", type="flash.events.Event")]
		[Event(name="addVirtualAppliance", type="flash.events.Event")]
		[Event(name="editVirtualAppliance", type="flash.events.Event")]
		[Event(name="deleteVirtualAppliance", type="flash.events.Event")]
	</mx:Metadata>

    <mx:Script>
        <![CDATA[
        	import net.undf.abicloud.vo.user.PrivilegeType;
        	import net.undf.abicloud.utils.SecuredPrivilegeAccess;
        	import mx.utils.ObjectUtil;
            import mx.collections.ArrayCollection;

            import net.undf.abicloud.events.VirtualApplianceEvent;
            import net.undf.abicloud.vo.infrastructure.State;
            import net.undf.abicloud.vo.virtualappliance.VirtualAppliance;
            import net.undf.abicloud.vo.virtualappliance.VirtualDataCenter;

            //The VirtualAppliance that is currently selected
            [Bindable]
            private var _selectedVirtualAppliance:VirtualAppliance;

            [Bindable(event="selectedVirtualApplianceChange")]
            public function get selectedVirtualAppliance():VirtualAppliance
            {
                return this._selectedVirtualAppliance;
            }

            public function set selectedVirtualAppliance(value:VirtualAppliance):void
            {
                this._selectedVirtualAppliance = value;
                dispatchEvent(new Event("selectedVirtualApplianceChange"));
            }

            //The array of all VirtualAppliances
            [Bindable]
            private var _virtualAppliances:ArrayCollection = new ArrayCollection();

            //The array of VirtualAppliances that will be shown
            [Bindable]
            private var _virtualAppliancesFiltered:ArrayCollection = new ArrayCollection();

            public function get virtualAppliances():ArrayCollection
            {
                return this._virtualAppliances;
            }

            public function set virtualAppliances(value:ArrayCollection):void
            {
                this._virtualAppliances = value;
            }
            
            private function onCreationComplete():void{
            	//Checking privilege
            	SecuredPrivilegeAccess.checkElementAccess(PrivilegeType.VDC_MANAGE_VAPP,"visible",vappTools);
            }
            
            public function cleanVirtualApplianceList():void
            {
                this._virtualAppliancesFiltered = new ArrayCollection();
            }
            

            /**
             * Initializes this component
             */
            public function init():void
            {
                onClickViewOptions('listMode');

                selectedVirtualAppliance = null;
                virtualAppliances = null;
            }


            /**
             * Changes the view mode
             * Options are listMode (shows a DataGrid) or iconsMode (shows a Tile component with
             * VirtualApplianceMiniature components)
             */
            private function onClickViewOptions(viewMode:String):void
            {
                if (viewMode == 'listMode')
                {
                    listButton.selected = true;
                    iconsButton.selected = false;
                    viewModesVS.selectedIndex = 0;
                }
                else if (viewMode == 'iconsMode')
                {
                    listButton.selected = false;
                    iconsButton.selected = true;
                    viewModesVS.selectedIndex = 1;
                }
            }


            private function onClickVirtualApplianceDataGrid():void
            {
                if (virtualApplianceDataGrid.selectedIndex > -1)
                {
                    selectedVirtualAppliance = virtualApplianceDataGrid.selectedItem as VirtualAppliance;
                    dispatchEvent(new Event("virtualApplianceSelected"));

                    if (virtualApplianceTile)
                        virtualApplianceTile.selectedIndex = virtualApplianceDataGrid.selectedIndex;
                }
                else
                {
                    this._selectedVirtualAppliance = null;
                }
            }

            private function onDoubleClickVirtualApplianceDataGrid():void
            {
                if (virtualApplianceDataGrid.selectedIndex > -1)
                {
                	if(SecuredPrivilegeAccess.userHasPrivilege(PrivilegeType.VAPP_CUSTOMISE_SETTINGS)){
	                    var virtualApplianceEvent:VirtualApplianceEvent = new VirtualApplianceEvent(VirtualApplianceEvent.VIRTUAL_APPLIANCE_SELECTED);
	                    virtualApplianceEvent.virtualAppliance = virtualApplianceDataGrid.selectedItem as VirtualAppliance;
	                    dispatchEvent(virtualApplianceEvent);                		
                	}
                }
            }

            private function onClickVirtualApplianceTile():void
            {
                if (virtualApplianceTile.selectedIndex > -1)
                {
                    selectedVirtualAppliance = virtualApplianceTile.selectedItem as VirtualAppliance;
                    dispatchEvent(new Event("virtualApplianceSelected"));

                    virtualApplianceDataGrid.selectedIndex = virtualApplianceTile.selectedIndex;
                }
                else
                    this._selectedVirtualAppliance = null;

            }

            private function onDoubleClickVirtualApplianceTile():void
            {
                if (virtualApplianceTile.selectedIndex > -1)
                {
                    var virtualApplianceEvent:VirtualApplianceEvent = new VirtualApplianceEvent(VirtualApplianceEvent.VIRTUAL_APPLIANCE_SELECTED);
                    virtualApplianceEvent.virtualAppliance = virtualApplianceTile.selectedItem as VirtualAppliance;
                    dispatchEvent(virtualApplianceEvent);
                }
            }

            public function filterVirtualAppliancesByVirtualDataCenter(virtualDataCenter:VirtualDataCenter):void
            {
                if (virtualDataCenter == null)
                {
                    //Virtual Appliances are not filtered. Showing them all
                    this._virtualAppliancesFiltered = this._virtualAppliances;
                }
                else
                {
                    //Filtering virtualAppliances by virtualDataCenter
                    var virtualAppliancesFiltered:ArrayCollection = new ArrayCollection();
                    var virtualAppliance:VirtualAppliance;
                    var length:int = this._virtualAppliances ? this._virtualAppliances.length:0;
                    var i:int;
                    for (i = 0; i < length; i++)
                    {
                        virtualAppliance = this._virtualAppliances.getItemAt(i) as VirtualAppliance;
                        if (virtualAppliance.virtualDataCenter.id == virtualDataCenter.id)
                        {
                            virtualAppliancesFiltered.addItem(virtualAppliance);
                        }
                    }

                    //Showing the filtered VirtualAppliances
                    this._virtualAppliancesFiltered = virtualAppliancesFiltered;
                }

                //Update view if _virtualAppliancesFiltered is not null
                if(this._virtualAppliancesFiltered){
	                if (virtualApplianceDataGrid)
	                    virtualApplianceDataGrid.selectedIndex = this._virtualAppliancesFiltered.getItemIndex(this._selectedVirtualAppliance);
	                if (virtualApplianceTile)
	                    virtualApplianceTile.selectedIndex = this._virtualAppliancesFiltered.getItemIndex(this._selectedVirtualAppliance);                	
                }
            }

            /**
             * Announces that user wants to create a new Virtual Appliance
             */
            private function addVirtualAppliance():void
            {
                dispatchEvent(new Event("addVirtualAppliance"));
            }

            /**
             * Announces that user wants to edit a Virtual Appliance
             */
            private function editVirtualAppliance():void
            {
                dispatchEvent(new Event("editVirtualAppliance"));
            }

            /**
             * Announces that user wants to delete a Virtual Appliance
             */
            private function deleteVirtualAppliance():void
            {
                dispatchEvent(new Event("deleteVirtualAppliance"));
            }
            
            /**
             * Compare two strings to sort them
             */
             private function sortLabels(obj1:Object, obj2:Object):int{
             	var tmp:String = obj1.name;
             	var tmp2:String = obj2.name;
             	var tmpResult:int = ObjectUtil.stringCompare(obj1.name as String , obj2.name as String, true);
             	return tmpResult;
             }
             
             private function compareVirtualImageState(virtualImg1:VirtualAppliance, virtualImg2:VirtualAppliance):int{
            	var virtualMachineState1:Number = virtualImg1.state.id;
            	var virtualMachineState2:Number = virtualImg2.state.id;
            	
            	return ObjectUtil.numericCompare(virtualMachineState1, virtualMachineState2);
            }
        ]]>
    </mx:Script>

    <!-- View modes selector & other actions-->
    <mx:HBox id="virtualApplianceHeader"
        width="100%" height="32"
        horizontalGap="0"
        paddingLeft="10"
        paddingRight="10"
        verticalAlign="middle"
        styleName="GeneralDataPanelTopFullSkin">

        <mx:Button id="listButton"
            styleName="ListViewButton"
            toolTip="@Resource(bundle='Common', key='BUTTON_LISTMODE_TOOLTIP')"
            selected="true"
            click="onClickViewOptions('listMode')"/>

        <mx:Button id="iconsButton"
            styleName="IconViewButton"
            toolTip="@Resource(bundle='Common', key='BUTTON_ICONSMODE_TOOLTIP')"
            click="onClickViewOptions('iconsMode')"/>

        <mx:HBox id="vAHeaderMoreButtonsContainer"/>
    </mx:HBox>


    <mx:ViewStack id="viewModesVS"
        width="100%" height="100%">

        <!-- Data Grid -->
        <mx:Canvas 
            width="100%" height="100%"
            verticalScrollPolicy="off" horizontalScrollPolicy="off">
            <mx:DataGrid id="virtualApplianceDataGrid"
                width="100%" height="100%"
                dataProvider="{this._virtualAppliancesFiltered}"
                doubleClickEnabled="true"
                click="onClickVirtualApplianceDataGrid()"
                doubleClick="onDoubleClickVirtualApplianceDataGrid()"
                sortableColumns="true">

                <mx:columns>
                    <mx:DataGridColumn dataField="name"
                        headerText="@Resource(bundle='Common', key='TEXTINPUT_LABEL_NAME')"
                        sortCompareFunction="sortLabels">
                        <mx:itemRenderer>
                            <mx:Component>
                            	<!-- GaB do not change this styles, they are here to force rollover over the background-->
                                <mx:Canvas width="100%" height="100%"
                                	creationComplete="onCreationComplete()"
                                	rollOver="onRollOver()"
                                    rollOut="onRollOut()"
                                    backgroundColor="#FFFFFF"
                                    backgroundAlpha="0"
                                	>
                                    <mx:Script>
                                        <![CDATA[
                                        	import net.undf.abicloud.vo.user.PrivilegeType;
                                        	import net.undf.abicloud.utils.SecuredPrivilegeAccess;
                                            import net.undf.abicloud.events.VirtualApplianceEvent;
                                            import net.undf.abicloud.vo.virtualappliance.VirtualAppliance;

                                            [Bindable]
                                            private var _virtualAppliance:VirtualAppliance;
                                            
                                            private function onCreationComplete():void{
                                            	SecuredPrivilegeAccess.checkElementAccess(PrivilegeType.VAPP_CUSTOMISE_SETTINGS,"removeChild",accessButton,vappBox);
                                            }

                                            override public function set data(value:Object):void
                                            {
                                                super.data = value;
                                                this._virtualAppliance = value as VirtualAppliance;
                                            }

                                            private function onClickVirtualAppliance():void
                                            {
                                                var virtualApplianceEvent:VirtualApplianceEvent = new VirtualApplianceEvent(VirtualApplianceEvent.VIRTUAL_APPLIANCE_SELECTED);
                                                virtualApplianceEvent.virtualAppliance = this._virtualAppliance;
                                                dispatchEvent(virtualApplianceEvent);
                                            }

                                            private function onRollOver():void
                                            {
                                                accessButton.visible = true;
                                            }

                                            private function onRollOut():void
                                            {
                                                accessButton.visible = false;
                                            }
                                        ]]>
                                    </mx:Script>
                                    <mx:HBox
                                    	id="vappBox"
										styleName="VirtualApplianceListBase"										
										horizontalGap="0"	
										paddingBottom="0"
										paddingLeft="5"
										paddingRight="0"
										paddingTop="0"
										verticalAlign="middle">
	                                    <mx:Label 
	                                        height="16"
	                                        text="{this._virtualAppliance.name}"
	                                        truncateToFit="true"/>
	
	                                    <mx:Button id="accessButton"
	                                        right="0"
	                                        styleName="ListAccessButton"
	                                        toolTip="@Resource(bundle='Common', key='BUTTON_ENTER_TOOLTIP')"
	                                        visible="false"
	                                        click="onClickVirtualAppliance()"/>
	                                </mx:HBox>
                                </mx:Canvas>
                            </mx:Component>
                        </mx:itemRenderer>
                    </mx:DataGridColumn>

                    <mx:DataGridColumn 
                        width="24"
                        sortCompareFunction="compareVirtualImageState"
                        sortable="true"
                        resizable="false"
                        headerText="">
                        <mx:itemRenderer>
                            <mx:Component>
                                <mx:Canvas 
                                    width="12" height="13">
                                    <mx:Script>
                                        <![CDATA[
                                        	import net.undf.abicloud.view.main.CommonAssets;
                                        	import net.undf.abicloud.utils.AbicloudUtils;
                                        	import net.undf.abicloud.view.main.StateIcons;
                                            import net.undf.abicloud.vo.infrastructure.State;
                                            import net.undf.abicloud.vo.virtualappliance.VirtualAppliance;

                                            [Bindable]
                                            private var _virtualAppliance:VirtualAppliance;

                                            override public function set data(value:Object):void
                                            {
                                                super.data = value;
                                                this._virtualAppliance = value as VirtualAppliance;
                                            }
                                        ]]>
                                    </mx:Script>
                                    <utils:SmoothImage 
                                        width="14" height="14"
                                        horizontalCenter="0"
                                        verticalCenter="0"
                                        includeInLayout="{this._virtualAppliance.subState.id != State.UNKNOWN}"
                                        source="{(this._virtualAppliance.state.id == State.RUNNING) ? StateIcons.RUNNING : 
						   										((this._virtualAppliance.state.id == State.APPLY_CHANGES_NEEDED) ? StateIcons.APPLY_CHANGES_NEEDED : StateIcons.POWERED_OFF)}"
                                        visible="{this._virtualAppliance.subState.id != State.IN_PROGRESS &amp;&amp; this._virtualAppliance.subState.id != State.UNKNOWN}"/>
									        
									   <utils:SmoothImage 
									        width="18" height="18"
									        horizontalCenter="0"
                                        	verticalCenter="0"
									        source="{CommonAssets.unknownIcon}"
									        toolTip="@Resource(bundle='Infrastructure', key='LABEL_VM_UNKNOWN')"
									        includeInLayout="{this._virtualAppliance.subState.id == State.UNKNOWN}"
									        visible="{this._virtualAppliance.subState.id == State.UNKNOWN}"/>
                                   
                                    <mx:SWFLoader
                                    	id="virtualApplicanceListBaseLoadingSmall" 
                                        width="14" height="14"
                                        horizontalCenter="0"
                                        verticalCenter="0"
                                        creationComplete="AbicloudUtils.getImageFromStyle('VirtualApplianceBusyIconSmall', virtualApplicanceListBaseLoadingSmall)"
                                        visible="{this._virtualAppliance.state.id == State.IN_PROGRESS}"/>
                                </mx:Canvas>
                            </mx:Component>
                        </mx:itemRenderer>
                    </mx:DataGridColumn>

                    <mx:DataGridColumn 
                        width="24"
                        sortable="true"
						dataField="error"
                        resizable="false"
                        headerText="">
                        <mx:itemRenderer>
                            <mx:Component>
                                <mx:Canvas 
                                    width="12" height="13">
                                    <mx:Script>
                                        <![CDATA[
                                            import net.undf.abicloud.vo.virtualappliance.VirtualAppliance;
                                            import net.undf.abicloud.vo.infrastructure.State;

                                            [Bindable]
                                            private var _virtualAppliance:VirtualAppliance;

                                            override public function set data(value:Object):void
                                            {
                                                super.data = value;
                                                this._virtualAppliance = value as VirtualAppliance;
                                            }
                                        ]]>
                                    </mx:Script>
                                    <utils:SmoothImage 
                                        width="18" height="18"
                                        horizontalCenter="0"
                                        verticalCenter="0"
                                        id="virtualApplianceListBaseAlertIcon"
                                        creationComplete="net.undf.abicloud.utils.AbicloudUtils.getImageFromStyle('VirtualApplianceMiniatureAlertIcon', virtualApplianceListBaseAlertIcon)"
                                        visible="{this._virtualAppliance.error || 
													   			 this._virtualAppliance.state.id == State.FAILED}"/>
                                </mx:Canvas>
                            </mx:Component>
                        </mx:itemRenderer>
                    </mx:DataGridColumn>
                </mx:columns>
            </mx:DataGrid>
        </mx:Canvas>

        <!-- Icons -->
        <mx:Canvas 
            width="100%" height="100%"
            verticalScrollPolicy="off" horizontalScrollPolicy="off">
            <mx:TileList id="virtualApplianceTile"
                width="100%" height="100%"
                paddingBottom="0"
                paddingLeft="0"
                paddingRight="0"
                paddingTop="0"
                dataProvider="{this._virtualAppliancesFiltered}"
                doubleClickEnabled="true"
                itemRenderer="net.undf.abicloud.view.virtualappliance.components.virtualappliance.VirtualApplianceMiniature"
                click="onClickVirtualApplianceTile()"
                doubleClick="onDoubleClickVirtualApplianceTile()"/>
        </mx:Canvas>

    </mx:ViewStack>


    <!-- Tool Box -->
    <general:GeneralPanelToolBox 
        width="100%" height="32"
        styleName="GeneralDataPanelBottomSkin">
        <mx:HBox id="vappTools" width="100%" verticalAlign="middle">        	
	        <mx:Button id="addVirtualApplianceButton"
	            styleName="AddButton"
	            toolTip="@Resource(bundle='Common', key='BUTTON_NEW_TOOLTIP')"
	            click="addVirtualAppliance()"/>
	
	        <mx:Button id="deleteVirtualApplianceButton"
	            enabled="{this._selectedVirtualAppliance != null &amp;&amp; 
					   			 this._selectedVirtualAppliance.state.id != State.IN_PROGRESS &amp;&amp;
					   			 this._selectedVirtualAppliance.subState.id != State.UNKNOWN}"
	            styleName="RemoveButton"
	            toolTip="@Resource(bundle='Common', key='BUTTON_DEL_TOOLTIP')"
	            click="deleteVirtualAppliance()"/>
	
	        <mx:Spacer width="100%"/>
	
	        <mx:Button id="editVirtualApplianceButton"
	            enabled="{this._selectedVirtualAppliance != null &amp;&amp; 
					   			 this._selectedVirtualAppliance.state.id != State.IN_PROGRESS}"
	            styleName="ConfigurationButton"
	            toolTip="@Resource(bundle='Common', key='BUTTON_EDIT_TOOLTIP')"
	            click="editVirtualAppliance()"/>
        </mx:HBox>
    </general:GeneralPanelToolBox>

</mx:VBox>

