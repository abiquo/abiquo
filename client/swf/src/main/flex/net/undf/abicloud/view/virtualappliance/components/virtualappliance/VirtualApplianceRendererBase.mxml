<?xml version="1.0" encoding="utf-8"?>
<!--

     Abiquo community edition
     cloud management application for hybrid clouds
     Copyright (C) 2008-2010 - Abiquo Holdings S.L.

     This application is free software; you can redistribute it and/or
     modify it under the terms of the GNU LESSER GENERAL PUBLIC
     LICENSE as published by the Free Software Foundation under
     version 3 of the License

     This software is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     LESSER GENERAL PUBLIC LICENSE v.3 for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the
     Free Software Foundation, Inc., 59 Temple Place - Suite 330,
     Boston, MA 02111-1307, USA.

-->

<mx:Canvas 
    width="100%" height="100%"
    backgroundColor="#F4F4F4"
    borderStyle="solid"
    creationComplete="onCreationComplete()"
    verticalScrollPolicy="off" horizontalScrollPolicy="off"
    styleName="VirtualApplianceRendererCanvas"
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:utils="net.undf.abicloud.utils.*">

    <mx:Script>
        <![CDATA[

        	import net.undf.abicloud.events.InfrastructureEvent;
        	import net.undf.abicloud.vo.user.PrivilegeType;
        	import net.undf.abicloud.utils.SecuredPrivilegeAccess;
        	import net.undf.abicloud.view.main.CommonAssets;
       	import net.undf.abicloud.view.main.StateIcons;
        	import net.undf.abicloud.utils.AbicloudUtils;
            import mx.collections.ArrayCollection;
            import mx.controls.Alert;
            import mx.controls.dataGridClasses.DataGridColumn;
            import mx.events.CloseEvent;
            import mx.resources.ResourceBundle;
            import mx.resources.ResourceManager;
            import mx.utils.ObjectUtil;

            import net.undf.abicloud.events.VirtualApplianceEvent;
            import net.undf.abicloud.model.AbiCloudModel;
            import net.undf.abicloud.view.general.AbiCloudAlert;
            import net.undf.abicloud.vo.infrastructure.State;
            import net.undf.abicloud.vo.virtualappliance.Log;
            import net.undf.abicloud.vo.virtualappliance.VirtualAppliance;

            [ResourceBundle("VirtualAppliance")]
            private var rb2:ResourceBundle;

            //The VirtualAppliance that will be rendered
            [Bindable]

            protected var _virtualAppliance:VirtualAppliance;

            
            [Bindable]
            private var _logs:ArrayCollection;

            private function onCreationComplete():void{
            	//Check privilege
                SecuredPrivilegeAccess.checkElementAccess(PrivilegeType.VAPP_DEPLOY_UNDEPLOY, "removeChild",powerOnOffButton,vappAction);
            }
            /**
             * Sets the virtual appliance that this component will render
             */
            public function set virtualAppliance(value:VirtualAppliance):void
            {
                this._virtualAppliance = value;

                if(this._virtualAppliance){
	                getVirtualApplianceLogs();
                }
            }
            
            /**
             * Get the Virtual Appliances Logs
             */
            public function getVirtualApplianceLogs():void
            {
                var event:VirtualApplianceEvent = new VirtualApplianceEvent(VirtualApplianceEvent.GET_VIRTUAL_APPLIANCE_LOGS);
                event.virtualAppliance = this._virtualAppliance;
                event.callback = onLogsRetrieved;
                dispatchEvent(event); 
            }
            
            /**
             * Retrieve the list of Virtual Appliance
             */
            public function onLogsRetrieved(value:ArrayCollection):void
            {
                this._virtualAppliance.logs = value;
                this._logs = value; 

            }

            /**
             * Performs a "Start" or "Shutdown" action in the Virtual Appliance
             **/
            private function onClickPowerOnOffButton():void
            {
                if(this._virtualAppliance.state.id == State.APPLY_CHANGES_NEEDED){
                	AbiCloudAlert.showError(ResourceManager.getInstance().getString("Common",
                                                                                    "ALERT_TITLE_LABEL"),
                                            ResourceManager.getInstance().getString("VirtualAppliance",
                                                                                    "ALERT_APPLY_CHANGES_NEEDED_HEADER"),
                                            ResourceManager.getInstance().getString("VirtualAppliance",
                                                                                    "ALERT_APPLY_CHANGES_NEEDED_TEXT"),
                                            Alert.OK,
                                            null);
                }else if (!this._virtualAppliance.nodes || this._virtualAppliance.nodes.length == 0){
                    //Before POWERING ON or OFF, we need to retrieve the list of nodes for this Virtual Appliance
                    var event:VirtualApplianceEvent = new VirtualApplianceEvent(VirtualApplianceEvent.GET_VIRTUALAPPLIANCE_NODES);
                    event.virtualAppliance = this._virtualAppliance;
                    dispatchEvent(event);

                    //Lets know when the nodes are successfully retrieved
                    AbiCloudModel.getInstance().virtualApplianceManager.addEventListener(VirtualApplianceEvent.VIRTUAL_APPLIANCE_NODES_RETRIEVED,
                                                                                         onVirtualApplianceNodesRetrieved);
                }else
                {
                    powerOnOffVirtualAppliance();
                }
            }

            private function onVirtualApplianceNodesRetrieved(event:VirtualApplianceEvent):void
            {
                //Unregistering event
                AbiCloudModel.getInstance().virtualApplianceManager.removeEventListener(VirtualApplianceEvent.VIRTUAL_APPLIANCE_NODES_RETRIEVED,
                                                                                        onVirtualApplianceNodesRetrieved);

                //We are ready to power on/off the Virtual Appliance
                powerOnOffVirtualAppliance();
            }

            /**
             * Powers on or off the current Virtual Appliance
             */
            private function powerOnOffVirtualAppliance():void
            {
                switch (this._virtualAppliance.state.id)
                {
                    case State.RUNNING:
                        //Asking for confirmation to power the virtual appliance off
                        AbiCloudAlert.showAlert(ResourceManager.getInstance().getString("Common",
                                                                                        "ALERT_TITLE_LABEL"),
                                                ResourceManager.getInstance().getString("VirtualAppliance",
                                                                                        "ALERT_SHUTDOWN_VIRTUALAPPLIANCE_HEADER"),
                                                ResourceManager.getInstance().getString("VirtualAppliance",
                                                                                        "ALERT_SHUTDOWN_VIRTUALAPPLIANCE_TEXT"),
                                                Alert.YES | Alert.NO, powerOffVirtualAppliance);
                        break;

                    case State.PAUSED:
                        //Asking for confirmation to power the virtual appliance off
                        AbiCloudAlert.showAlert(ResourceManager.getInstance().getString("Common",
                                                                                        "ALERT_TITLE_LABEL"),
                                                ResourceManager.getInstance().getString("VirtualAppliance",
                                                                                        "ALERT_SHUTDOWN_VIRTUALAPPLIANCE_HEADER"),
                                                ResourceManager.getInstance().getString("VirtualAppliance",
                                                                                        "ALERT_SHUTDOWN_VIRTUALAPPLIANCE_TEXT"),
                                                Alert.YES | Alert.NO, powerOffVirtualAppliance);
                        break;

                    case State.APPLY_CHANGES_NEEDED:
                        //Asking for confirmation to power the virtual appliance off
                        AbiCloudAlert.showAlert(ResourceManager.getInstance().getString("Common",
                                                                                        "ALERT_TITLE_LABEL"),
                                                ResourceManager.getInstance().getString("VirtualAppliance",
                                                                                        "ALERT_SHUTDOWN_VIRTUALAPPLIANCE_HEADER"),
                                                ResourceManager.getInstance().getString("VirtualAppliance",
                                                                                        "ALERT_SHUTDOWN_VIRTUALAPPLIANCE_TEXT"),
                                                Alert.YES | Alert.NO, powerOffVirtualAppliance);
                        break;

                    case State.POWERED_OFF:
                        //The Virtual Appliance is powered off We proceed to power it on
                        powerOnVirtualAppliance();
                        break;

                    case State.NOT_DEPLOYED:
                        //The Virtual Appliance is powered off We proceed to power it on
                        powerOnVirtualAppliance();
                        break;

                    case State.FAILED:
                        //The VirtualAppliance is in state Failed, and cannot be modified
                        AbiCloudAlert.showError(ResourceManager.getInstance().getString("Common",
                                                                                        "ALERT_TITLE_LABEL"),
                                                ResourceManager.getInstance().getString("VirtualAppliance",
                                                                                        "ALERT_VIRTUALAPPLIANCE_FAILED_STATE_HEADER"),
                                                ResourceManager.getInstance().getString("VirtualAppliance",
                                                                                        "ALERT_VIRTUALAPPLIANCE_FAILED_STATE_TEXT"),
                                                Alert.OK);
                        break;

                    default:
                        AbiCloudAlert.showError(ResourceManager.getInstance().getString("Common",
                                                                                        "ALERT_TITLE_LABEL"),
                                                ResourceManager.getInstance().getString("VirtualAppliance",
                                                                                        "ALERT_VIRTUALAPPLIANCE_UNREG_STATE_HEADER"),
                                                ResourceManager.getInstance().getString("VirtualAppliance",
                                                                                        "ALERT_VIRTUALAPPLIANCE_UNREG_STATE_TEXT"),
                                                Alert.OK);
                }
            }


            protected function powerOnVirtualAppliance():void
            {
                var virtualApplianceEvent:VirtualApplianceEvent = new VirtualApplianceEvent(VirtualApplianceEvent.START_VIRTUALAPPLIANCE);

                virtualApplianceEvent.virtualAppliance = _virtualAppliance;
                dispatchEvent(virtualApplianceEvent);
            }

            private function powerOffVirtualAppliance(closeEvent:CloseEvent = null):void
            {
                if (!closeEvent || closeEvent.detail == Alert.YES)
                {
                    //No confirmation required or user confirmed the power off
                    var virtualApplianceEvent:VirtualApplianceEvent = new VirtualApplianceEvent(VirtualApplianceEvent.SHUTDOWN_VIRTUALAPPLIANCE);

                    virtualApplianceEvent.virtualAppliance = _virtualAppliance;
                    dispatchEvent(virtualApplianceEvent);
                }
            }

            private function onClickApplyChangesButton():void
            {
                var virtualApplianceEvent:VirtualApplianceEvent = new VirtualApplianceEvent(VirtualApplianceEvent.APPLY_CHANGES_VIRTUAL_APPLIANCE);
                virtualApplianceEvent.virtualAppliance = this._virtualAppliance;
                dispatchEvent(virtualApplianceEvent);
            }

            /**
             * When users makes click on refreshLogButton
             */
            private function onClickRefreshLogButton():void
            {
                //Asking for the last Log list for this Virtual Appliance
                var virtualApplianceEvent:VirtualApplianceEvent = new VirtualApplianceEvent(VirtualApplianceEvent.GET_VIRTUAL_APPLIANCE_UPDATED_LOGS);
                virtualApplianceEvent.virtualAppliance = this._virtualAppliance;
                dispatchEvent(virtualApplianceEvent);
            }

            /**
             * Announces that user wants to delete an specific log
             */
            public function deleteLog(log:Log):void
            {
                var virtualApplianceEvent:VirtualApplianceEvent = new VirtualApplianceEvent(VirtualApplianceEvent.MARK_LOG_AS_DELETED);
                virtualApplianceEvent.log = log;
                virtualApplianceEvent.virtualAppliance = this._virtualAppliance;
                dispatchEvent(virtualApplianceEvent);
            }

            private function dateLabelFunction(item:Object, column:DataGridColumn):String
            {
                var date:Date = Log(item).logDate;
                return AbicloudUtils.formatDate(date,true);
            }
        ]]>
    </mx:Script>

    <!-- Virtual Appliance state -->
    <mx:VBox 
        width="27" height="100%"
        left="0"
        horizontalAlign="center"
        verticalAlign="middle"
        verticalGap="3"
        verticalScrollPolicy="off" horizontalScrollPolicy="off"
        styleName="VerticalStateBlackBarSkin">

         <utils:SmoothImage id="startImage"
            source="{(this._virtualAppliance.state.id == State.RUNNING &amp;&amp; this._virtualAppliance.subState.id != State.UNKNOWN) ? StateIcons.RUNNING:StateIcons.NOT_DEPLOYED}"/>

        <utils:SmoothImage id="applyChangesImage"
            source="{(this._virtualAppliance.state.id == State.APPLY_CHANGES_NEEDED) ? StateIcons.PAUSED:StateIcons.NOT_DEPLOYED}"/>

        <utils:SmoothImage id="stopImage"
            source="{(this._virtualAppliance.state.id == State.POWERED_OFF || this._virtualAppliance.state.id == State.NOT_DEPLOYED) ? StateIcons.POWERED_OFF:StateIcons.DISABLED}"
            visible="{this._virtualAppliance.subState.id == State.UNKNOWN ? false:true}"
            includeInLayout="{this._virtualAppliance.subState.id == State.UNKNOWN ? false:true}"/>

		<utils:SmoothImage id="unknow_Image"
            source="{(this._virtualAppliance.subState.id == State.UNKNOWN) ? CommonAssets.unknownIcon:null}"
            visible="{this._virtualAppliance.subState.id == State.UNKNOWN}"
            includeInLayout="{this._virtualAppliance.subState.id == State.UNKNOWN}"
            toolTip="@Resource(bundle='Main', key='LABEL_VM_UNKNOWN')"/>       

    </mx:VBox>

    <mx:HBox 
        height="100%"
        left="27" right="63"
        paddingBottom="0"
        paddingLeft="0"
        paddingRight="0"
        paddingTop="0"
        verticalCenter="0"
        verticalScrollPolicy="off" horizontalScrollPolicy="off">

        <!-- Virtual Appliance information -->
        <mx:HBox 
            width="50%" height="100%"
            horizontalGap="0"
            paddingLeft="8"
            paddingTop="10"
            verticalAlign="top">

            <mx:Canvas 
                width="120" height="100%"
                verticalScrollPolicy="off" horizontalScrollPolicy="off">
                <utils:SmoothImage id="virtualApplianceIcon"
                    width="120" height="120"
                    horizontalCenter="0"
                    verticalCenter="0"
                    creationComplete="AbicloudUtils.getImageFromStyle('VirtualApplianceIcon', virtualApplianceIcon)"
                    maintainAspectRatio="true"/>

                <mx:SWFLoader id="busyIcon"
                    width="80" height="80"
                    horizontalCenter="-10"
                    verticalCenter="-10"
                    creationComplete="AbicloudUtils.getImageFromStyle('VirtualApplianceBusyIcon', busyIcon)"
                    visible="{this._virtualAppliance.state.id == State.IN_PROGRESS}"/>
            </mx:Canvas>


            <mx:VBox 
                width="100%" height="100%"
                paddingTop="4"
                verticalGap="0"
                verticalScrollPolicy="off" horizontalScrollPolicy="off">

                <mx:Label 
                    styleName="VirtualApplianceRendererLabel1"
                    text="{this._virtualAppliance.name}" minWidth="100"
                    maxWidth="220" truncateToFit="true"
                    toolTip="{this._virtualAppliance.name}"/>

                <mx:Label 
                    styleName="VirtualApplianceRendererLabel2"
                    text="{this._virtualAppliance.virtualDataCenter.name}"
                    minWidth="100" maxWidth="220" truncateToFit="true"
                    toolTip="{this._virtualAppliance.name}"/>

                <!-- Public or Private information is disabled
                     erase "visible = false" to enable it -->
                <mx:Label 
                    text="{this._virtualAppliance.isPublic ? ResourceManager.getInstance().getString('VirtualAppliance', 'LABEL_PUBLIC') :
																   ResourceManager.getInstance().getString('VirtualAppliance', 'LABEL_PRIVATE')}"
                    visible="false"/>

            </mx:VBox>
        </mx:HBox>

        <mx:VRule 
            width="1" height="100%"
            horizontalCenter="0"
            styleName="VirtualApplianceRendererVRule1"
            />

        <!-- VirtualAppliance logs -->
        <mx:VBox 
            width="100%" height="100%"
            paddingBottom="10"
            paddingRight="10"
            paddingTop="10"
            verticalGap="3">

            <mx:HBox 
                paddingBottom="0"
                paddingLeft="0"
                paddingRight="0"
                paddingTop="0"
                verticalAlign="middle">
                <mx:Label 
                    fontSize="14"
                    fontWeight="bold"
                    paddingTop="4"
                    text="@Resource(bundle='VirtualAppliance', key='LABEL_LOGS_MESSAGE')"/>

                <mx:Button id="refreshLogButton"
                    styleName="RefreshButton"
                    toolTip="@Resource(bundle='VirtualAppliance', key='TOOLTIP_REFRESH_LOG_BUTTON')"
                    click="onClickRefreshLogButton()"/>
            </mx:HBox>

            <mx:DataGrid id="logsDataGrid"
                width="50%"
                rowHeight="80"
                rowCount="1"
                dataProvider="{this._logs}" selectable="true">

                <mx:columns>

                    <mx:DataGridColumn id="dateDGColumn"
                        width="100"
                        labelFunction="dateLabelFunction"
                        resizable="false"
                        dataField="date"
                        sortable="true"
                        headerText="@Resource(bundle='VirtualAppliance', key='LABEL_DATE')"/>

                    <mx:DataGridColumn 
                        headerText="@Resource(bundle='VirtualAppliance', key='LABEL_MESSAGE')"
                        sortable="false">
                        <mx:itemRenderer>
                            <mx:Component>
                                <mx:Canvas 
                                    width="100%" height="100%"
                                    verticalScrollPolicy="off"
                                    horizontalScrollPolicy="off">
                                    <mx:Script>
                                        <![CDATA[
                                            import net.undf.abicloud.vo.virtualappliance.Log;

                                            [Bindable]
                                            private var _log:Log

                                            override public function set data(value:Object):void
                                            {
                                                super.data = value;
                                                this._log = value as Log;
                                            }
                                        ]]>
                                    </mx:Script>
                                    <mx:Text id="messageLabel"
                                        width="95%"
                                        htmlText="{this._log.description}"/>
                                </mx:Canvas>
                            </mx:Component>
                        </mx:itemRenderer>
                    </mx:DataGridColumn>

                    <mx:DataGridColumn id="logDeleteGridColumn"
                        width="22"
                        resizable="false"
                        sortable="false">
                        <mx:itemRenderer>
                            <mx:Component>
                                <mx:Canvas 
                                    width="100%" height="100%"
                                    verticalScrollPolicy="off"
                                    horizontalScrollPolicy="off">

                                    <mx:Script>
                                        <![CDATA[
                                            import net.undf.abicloud.vo.virtualappliance.Log;

                                            private function onClickDeleteButton():void
                                            {
                                                parentDocument.deleteLog(data as Log);
                                            }
                                        ]]>
                                    </mx:Script>
                                    <mx:Button 
                                        width="19" height="19"
                                        styleName="DeleteButton"
                                        toolTip="@Resource(bundle='VirtualAppliance', key='LABEL_ERASE')"
                                        click="onClickDeleteButton()"/>

                                </mx:Canvas>
                            </mx:Component>
                        </mx:itemRenderer>
                    </mx:DataGridColumn>
                </mx:columns>
            </mx:DataGrid>
        </mx:VBox>
    </mx:HBox>

    <!-- Virtual Appliance actions -->
    <mx:VBox 
    	id="vappAction"
        width="57" height="100%"
        right="0"
        verticalAlign="top"
        verticalGap="0"
        verticalScrollPolicy="off" horizontalScrollPolicy="off"
        enabled="{this._virtualAppliance.state.id != State.IN_PROGRESS &amp;&amp; this._virtualAppliance.state.id != State.FAILED &amp;&amp; this._virtualAppliance.subState.id != State.UNKNOWN}"
        styleName="VerticalStateBlackBarSkin">

        <mx:Button id="powerOnOffButton"
            width="57" height="47"
            styleName="VirtualApplianceDeployBigButton"
            selected="{_virtualAppliance.state.id == State.PAUSED || _virtualAppliance.state.id == State.RUNNING || _virtualAppliance.state.id == State.APPLY_CHANGES_NEEDED}"
            toolTip="{powerOnOffButton.selected ? ResourceManager.getInstance().getString('VirtualAppliance', 'LABEL_UNDEPLOY') : 
				   										 ResourceManager.getInstance().getString('VirtualAppliance', 'LABEL_DEPLOY')}"
            click="onClickPowerOnOffButton()"
            useHandCursor="true"
            mouseChildren="false"
            buttonMode="true"/>

    </mx:VBox>
</mx:Canvas>
