<?xml version="1.0" encoding="utf-8"?>
<!--

     Abiquo community edition
     cloud management application for hybrid clouds
     Copyright (C) 2008-2010 - Abiquo Holdings S.L.

     This application is free software; you can redistribute it and/or
     modify it under the terms of the GNU LESSER GENERAL PUBLIC
     LICENSE as published by the Free Software Foundation under
     version 3 of the License

     This software is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     LESSER GENERAL PUBLIC LICENSE v.3 for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the
     Free Software Foundation, Inc., 59 Temple Place - Suite 330,
     Boston, MA 02111-1307, USA.

-->

<AbiCloudPopUp 
    xmlns="net.undf.abicloud.view.general.*"
    xmlns:mx="http://www.adobe.com/2006/mxml"
    titleText="@Resource(bundle='User', key='POPUP_TITLE_USERADD')" 
    wikiUrl="{AbiCloudModel.getInstance().configurationManager.config.client_wiki_user_createUser.value}"
    xmlns:virtualdatacenter="net.undf.abicloud.view.user.components.user.virtualdatacenter.*">

    <mx:Metadata>
		[Event(name="userAddClose", type="flash.events.Event")]		
	</mx:Metadata>


    <mx:Script>
        <![CDATA[
        	import net.undf.abicloud.vo.result.ListRequest;
        	import net.undf.abicloud.vo.user.PrivilegeType;
        	import net.undf.abicloud.vo.user.Role;
        	import net.undf.abicloud.utils.AbicloudUtils;
        	import mx.managers.PopUpManager;
        	import mx.controls.Alert;
        	import net.undf.abicloud.events.VirtualApplianceEvent;
        	import net.undf.abicloud.vo.virtualappliance.VirtualDataCenter;
        	import mx.collections.ArrayCollection;
            import net.undf.abicloud.vo.user.Enterprise;
            import mx.resources.ResourceManager;
            import net.undf.abicloud.business.managers.UserManager;
            import mx.binding.utils.BindingUtils;
            import net.undf.abicloud.events.UserEvent;
            import net.undf.abicloud.vo.user.Role;
            import net.undf.abicloud.vo.user.User;
            import net.undf.abicloud.model.AbiCloudModel;
            import com.adobe.crypto.MD5;

            //Flag to indicate when this component is listening for new user creation
            private var _listenerRegistered:Boolean;

            //The Enterprise to which the User will be assigned
            private var _enterprise:Enterprise;
            
            //List of virtual data center
            [Bindable]
            public var virtualDataCenterList:ArrayCollection;
            
            private var _firstRetrieve:Boolean;
            
            [Bindable]
            private var _restrict:Boolean;
            
            [Bindable]
            private var _vdcAllowed:Boolean;

            /**
             * Initializes this form to create a new user
             **/
            public function init(enterprise:Enterprise):void
            {
                this._enterprise = enterprise;

                enterpriseInput.text = this._enterprise.name;
                nameInput.text = "";
                surnameInput.text = "";
                roleInput.selectedIndex = -1;
                userInput.text = "";
                passwordInput.text = "";
                passwordRepeatInput.text = "";
                emailInput.text = "";
                descriptionInput.text = "";
                activeInput.selected = true;

                _listenerRegistered = false;
                labelPasswordInvalid.visible = false;
                acceptButton.enabled = false;

                nameInput.setFocus();
                
                this._vdcAllowed = false;
                
                //In case that any VDC exists, we need to call just one time the retrieve vdc list
                this._firstRetrieve = true;
                
                virtualDatacenterList.listOfSelectedVirtualDatacenter = new ArrayCollection();
                //this._restrict = false;
                
                BindingUtils.bindSetter(updateVirtualDataCenter,AbiCloudModel.getInstance().virtualApplianceManager,"virtualDataCenters");
                
                requestRoles();
            }
            
            /**
             * To set the list of available virtual datacenters
             **/
            private function updateVirtualDataCenter(value:ArrayCollection):void{
        		if(this._firstRetrieve){
            		var event:VirtualApplianceEvent = new VirtualApplianceEvent(VirtualApplianceEvent.GET_VIRTUAL_DATACENTERS_BY_ENTERPRISE);
            		event.enterprise = this._enterprise;
            		dispatchEvent(event);            		
            		this._firstRetrieve = false;
           		}else{            		
            		virtualDataCenterList = value;
            	}            	 
            }
            
            /**
             * To save the new user
             **/
            private function onAccept():void
            {
                var newUser:User = new User();

                newUser.name = nameInput.text;
                newUser.surname = surnameInput.text;
                newUser.role = roleInput.selectedItem as Role;
                newUser.user = userInput.text;
                newUser.pass = passwordInput.text;
                newUser.email = emailInput.text;
                newUser.description = descriptionInput.text;
                newUser.active = activeInput.selected;
                newUser.locale = ResourceManager.getInstance().localeChain[0];
                newUser.enterprise = this._enterprise;
                
                if(this._vdcAllowed){
	                newUser.availableVirtualDatacenters = virtualDatacenterList.listOfSelectedVirtualDatacenter.toArray();                	
                }else{
                	newUser.availableVirtualDatacenters = new Array();
                }

                //Registering listener, if it is not, to know when the user has been created
                if (!this._listenerRegistered)
                {
                    AbiCloudModel.getInstance().userManager.addEventListener(UserManager.USERS_UPDATED,
                                                                             onUserCreated);
                    this._listenerRegistered = true;
                }

                //Announcing that user wants to create a new user
                var userEvent:UserEvent = new UserEvent(UserEvent.CREATE_USER);
                userEvent.user = newUser;
                dispatchEvent(userEvent);
            }            


            /**
             * Cancels the User Creation
             **/
            private function onCancel():void
            {
                //Unregistering listener, if registered
                if (this._listenerRegistered)
                    AbiCloudModel.getInstance().userManager.removeEventListener(UserManager.USERS_UPDATED,
                                                                                onUserCreated);

                dispatchEvent(new Event("userAddClose"));
            }

            /**
             * Handler for success in new user creation
             **/
            private function onUserCreated(event:Event):void
            {
                //Now that user has been successfully created, we can close this Pop Up
                onCancel();
            }

            /**
             * Activates the Accept Button if the form is valid
             **/
            private function validateForm():void
            {
                if (nameInput.text.length > 0 && surnameInput.text.length > 0 && roleInput.selectedIndex > -1 && passwordInput.text.length > 0 && emailInput.text.length > 0 && userInput.text.length > 0)
                {
                    if (passwordInput.text == passwordRepeatInput.text)
                    {
                        labelPasswordInvalid.visible = false;
                        acceptButton.enabled = true;
                    }
                    else
                    {
                        labelPasswordInvalid.visible = true;
                        acceptButton.enabled = false;
                    }
					emailValidator.validate();
                }

                else
                    acceptButton.enabled = false;
            }

            /**
             * Basic behaivour is as follows:
             * If user presses the Enter, in any part of this Pop Up (except buttons), it would be
             * like Accept Button has been pressed
             */
            override protected function keyboardHandler(keyboardEvent:KeyboardEvent):void
            {
                if (keyboardEvent.target == acceptButton || keyboardEvent.target == cancelButton)
                    super.keyboardHandler(keyboardEvent);
                else
                {
                    if (keyboardEvent.keyCode == 13 && acceptButton.enabled)
                        onAccept();
                }
            }
            
            /**
             * To hide contents when a resize effect starts. For performance purposes
             */
            private function onResizeEffectStart():void
            {
                userAddForm.visible = false;
            }

            /**
             * While resizing, we keep the PopUp centered
             */
            private function onResizeEffectUpdate():void
            {
                PopUpManager.centerPopUp(this);
            }

            /**
             * To hide contents when a resize effect ends. For performance purposes
             */
            private function onResizeEffectEnd():void
            {
                userAddForm.visible = true;
               
            }
            
            /**
             * Show/hide the list of virtualdatacenter
             */
            private function showHideRestrict():void{
            	
            	this._restrict = ! this._restrict;
            	//We remove all selected VDC
            	if(!this._restrict){
            		virtualDatacenterList.listOfSelectedVirtualDatacenter = new ArrayCollection();
            	}else{
            		virtualDatacenterList.refreshCheckbox();
            	}
            	PopUpManager.centerPopUp(this);
            	
            }
            
            private function requestRoles():void{
            	var roleListOptions:ListRequest = new ListRequest();
                roleListOptions.offset = 0;
                roleListOptions.numberOfNodes = 10000;
                roleListOptions.filterLike = "";
                roleListOptions.asc = true;
                roleListOptions.orderBy = "enterprise";            	
            	
            	var roleEvent:UserEvent = new UserEvent(UserEvent.GET_ROLES);
           		roleEvent.enterprise = this._enterprise;
            	roleEvent.roleListOptions = roleListOptions;
            	dispatchEvent(roleEvent);
            }
            
            private function requestPrivilege():void{
            	var event:UserEvent = new UserEvent(UserEvent.CHECK_ROLE_PRIVILEGE);
            	event.role = roleInput.selectedItem as Role;
            	event.privilege = PrivilegeType.USERS_PROHIBIT_VDC_RESTRICTION;
            	event.callback = setRestrictedVDC;
            	dispatchEvent(event);
            	validateForm();
            }
            
            private function setRestrictedVDC(value:Boolean):void{
            	this._vdcAllowed = value;	
            }
            
        ]]>
    </mx:Script>
    
    <mx:Resize id="myResize"
        duration="800"
        heightTo="{explicitHeight}"
        widthTo="{explicitWidth}"
        tweenStart="onResizeEffectStart()"
        tweenUpdate="onResizeEffectUpdate()"
        tweenEnd="onResizeEffectEnd()"/>
    
     <mx:EmailValidator id="emailValidator"
    	source="{emailInput}" 
    	property="text" required="true" 
    	trigger="{emailInput}"
    	triggerEvent="change" 
    	invalid="invalidEmail.visible = true ; acceptButton.enabled = false"
    	valid="invalidEmail.visible = false"/>

    <mx:Form paddingTop="3" 
    	width="100%" 
    	id="userAddForm">

        <mx:FormItem label="@Resource(bundle='User', key='LABEL_ENTERPRISE')">
            <mx:TextInput id="enterpriseInput"
                height="20"
                editable="false"/>
        </mx:FormItem>

        <mx:FormItem 
            label="@Resource(bundle='User', key='TEXTINPUT_LABEL_NAME')"
            required="true">
            <mx:TextInput id="nameInput"
                height="20"
                maxChars="29"
                change="validateForm()"/>
        </mx:FormItem>

        <mx:FormItem 
            label="@Resource(bundle='User', key='TEXTINPUT_LABEL_SURNAME')"
            required="true">
            <mx:TextInput id="surnameInput"
                height="20"
                maxChars="49"
                change="validateForm()"/>
        </mx:FormItem>

        <mx:FormItem 
            label="@Resource(bundle='User', key='LABEL_ROLE')"
            required="true">
            <mx:ComboBox id="roleInput"
                height="18"
                dataProvider="{AbiCloudModel.getInstance().userManager.roles}"
                labelField="name"
                change="requestPrivilege()"
                prompt="@Resource(bundle='User', key='COMBOBOX_PROMPT_ROLE')"/>
        </mx:FormItem>
        
        <mx:FormItem 
        	id="vdcFormItem"
        	direction="horizontal"
            label="@Resource(bundle='User', key='LABEL_ALLOWED_VIRTUAL_DATACENTER')"
            visible="{!this._vdcAllowed}"
            includeInLayout="{!this._vdcAllowed}">
            <mx:VBox verticalAlign="middle"
            	visible="{this._restrict}"
            	includeInLayout="{this._restrict}">
            	<mx:HBox verticalAlign="middle">
	            	<mx:Image
			    		id="alertIcon"
			    		toolTip="@Resource(bundle='User',key='TOOLTIP_RESTRICT_ACCESS')"
			    		creationComplete="AbicloudUtils.getImageFromStyle('CommonAssetsAlert', alertIcon)"/>
	            	<mx:Label text="@Resource(bundle='User',key='LABEL_ALLOWED_VDC')" 
	            		styleName="DataCenterCreationWarning"/>            		
            	</mx:HBox>
	            <virtualdatacenter:AvailableVirtualDatacenterList 
	            	toolTip="@Resource(bundle='User',key='TOOLTIP_RESTRICT_ACCESS')"
	            	id="virtualDatacenterList" 
	            	rowCount="4"
	            	dataProvider="{virtualDataCenterList}"
	            	visible="{this._restrict}"
	            	includeInLayout="{this._restrict}"
	            	width="100%"/> 	
            </mx:VBox>
        	<mx:Button 
        		id="hideButton"
        		height="18"
        		label="{this._restrict ? resourceManager.getString('User','BUTTON_DONT_RESTRICT_ACCESS'):resourceManager.getString('User','BUTTON_RESTRICT_ACCESS')}"
        		click="showHideRestrict()"/>
        </mx:FormItem>

        <mx:FormItem 
            label="@Resource(bundle='User', key='TEXTINPUT_LABEL_USER')"
            direction="horizontal"
            required="true">
            <mx:TextInput id="userInput"
                height="20"
                maxChars="128"
                change="validateForm()"/>
        </mx:FormItem>

        <mx:FormItem 
            label="@Resource(bundle='User', key='TEXTINPUT_LABEL_PASSWORD')"
            required="true">
            <mx:TextInput id="passwordInput"
                height="20"
                maxChars="14"
                change="validateForm()"
                displayAsPassword="true"/>
        </mx:FormItem>

        <mx:FormItem 
            label="@Resource(bundle='User', key='TEXTINPUT_LABEL_PASSWORDREPEAT')"
            direction="horizontal"
            required="true">
            <mx:TextInput id="passwordRepeatInput"
                height="20"
                maxChars="14"
                change="validateForm()"
                displayAsPassword="true"/>

            <mx:Label id="labelPasswordInvalid"
                color="#FF0000"
                fontWeight="bold"
                text="@Resource(bundle='User', key='LABEL_PASSWORDINVALID')"/>
        </mx:FormItem>

         <mx:FormItem 
            label="@Resource(bundle='User', key='TEXTINPUT_LABEL_EMAIL')"
            required="true" direction="horizontal">
            <mx:TextInput id="emailInput"
                height="20"
                maxChars="200"
                change="validateForm()"/>
            <mx:Label id="invalidEmail"
            	color="#FF0000"
                fontWeight="bold" 
                text="@Resource(bundle='User',key='LABEL_EMAIL_INVALID')"
            	visible="false"/>
        </mx:FormItem>

        <mx:FormItem label="@Resource(bundle='User', key='TEXTINPUT_LABEL_DESCRIPTION')">
            <mx:TextArea id="descriptionInput"
                maxChars="99"/>
        </mx:FormItem>

        <mx:FormItem label="@Resource(bundle='User', key='LABEL_ACTIVATED')">
            <mx:CheckBox id="activeInput"/>
        </mx:FormItem>

        <!-- BUTTONS -->
        <mx:FormItem direction="horizontal">
            <mx:Button id="acceptButton"
                height="18"
                label="@Resource(bundle='Common', key='BUTTON_ACCEPT')"
                click="onAccept()"/>

            <mx:Button id="cancelButton"
                height="18"
                label="@Resource(bundle='Common', key='BUTTON_CANCEL')"
                styleName="AlternativeButton"
                click="onCancel()"/>
        </mx:FormItem>
    </mx:Form>
</AbiCloudPopUp>
