<?xml version="1.0" encoding="utf-8"?>
<!--

     Abiquo community edition
     cloud management application for hybrid clouds
     Copyright (C) 2008-2010 - Abiquo Holdings S.L.

     This application is free software; you can redistribute it and/or
     modify it under the terms of the GNU LESSER GENERAL PUBLIC
     LICENSE as published by the Free Software Foundation under
     version 3 of the License

     This software is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     LESSER GENERAL PUBLIC LICENSE v.3 for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the
     Free Software Foundation, Inc., 59 Temple Place - Suite 330,
     Boston, MA 02111-1307, USA.

-->

<mx:VBox 
	horizontalAlign="center"
    verticalAlign="middle"
    paddingTop="10"
    verticalScrollPolicy="off"
    horizontalScrollPolicy="off"
    creationComplete="onCreationComplete()"
    xmlns="net.undf.abicloud.view.general.*"
    xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:rack="net.undf.abicloud.view.infrastructure.components.rack.*">


    <mx:Script>
        <![CDATA[
        	import net.undf.abicloud.vo.infrastructure.UcsRack;
            import mx.utils.ObjectUtil;
            import mx.resources.ResourceBundle;
            import mx.resources.ResourceManager;
            import net.undf.abicloud.events.InfrastructureEvent;
            import net.undf.abicloud.vo.infrastructure.Rack;
            import net.undf.abicloud.vo.infrastructure.DataCenter;
            import net.undf.abicloud.model.AbiCloudModel;

            [ResourceBundle("Infrastructure")]
            private var rb:ResourceBundle;

            //The Datacenter where the Rack is assigned
            private var _datacenter:DataCenter;

            //The new rack that will be created or edited
            private var _rack:Rack;
            
            [Bindable]
            private var _rackType:Array;
            
            private function onCreationComplete():void{
            	this._rackType = [Rack.TYPE, UcsRack.TYPE];
            }

            /**
             * Initializes this component, with the data center to which the new rack will be assigned
             **/
            public function init(dataCenter:DataCenter, rack:Rack = null):void
            {
                this._datacenter = dataCenter;
                this._rack = rack;

                if (this._rack)
                {

                    nameInput.text = this._rack.name;
                    shortDescriptionInput.text = this._rack.shortDescription;
                    largeDescriptionInput.text = this._rack.largeDescription;
                    rackTypeCombo.enabled = false;
                }
                else
                {

                    nameInput.text = "";
                    shortDescriptionInput.text = "";
                    largeDescriptionInput.text = "";
                    rackTypeCombo.enabled = true;
                }

                nameInput.setFocus();
            }


            /**
             * Activates the Accept Button if the form is valid
             **/
            private function validateForm():void
            {
                dispatchEvent(new Event('validForm'));
            }
           
        ]]>
    </mx:Script>

    <mx:Form paddingTop="3" id="basicInfoForm">
        <mx:FormItem 
            label="@Resource(bundle='Common', key='TEXTINPUT_LABEL_NAME')"
            required="true">
            <mx:TextInput id="nameInput"
                height="20"
                maxChars="20"
                change="validateForm()"/>
        </mx:FormItem>

        <mx:FormItem label="@Resource(bundle='Infrastructure', key='TEXTINPUT_LABEL_SHORTDESCRIPTION')">
            <mx:TextArea id="shortDescriptionInput"
                maxChars="29"/>
        </mx:FormItem>

        <mx:FormItem 
        	includeInLayout="false"
        	visible="false"
        	label="@Resource(bundle='Infrastructure', key='TEXTINPUT_LABEL_LARGEDESCRIPTION')">
            <mx:TextArea id="largeDescriptionInput"
                maxChars="99"/>
        </mx:FormItem>
        
        <mx:FormItem 
        	id="rackTypeFormItem"
        	visible="false"
        	includeInLayout="false"
        	label="@Resource(bundle='Infrastructure', key='COMBOBOX_RACK_TYPE')">
        	<mx:ComboBox 
        		id="rackTypeCombo"
        		height="18" dataProvider="{this._rackType}"/>
        </mx:FormItem>
    </mx:Form>
</mx:VBox>
