<?xml version="1.0" encoding="utf-8"?>
<!--

     Abiquo community edition
     cloud management application for hybrid clouds
     Copyright (C) 2008-2010 - Abiquo Holdings S.L.

     This application is free software; you can redistribute it and/or
     modify it under the terms of the GNU LESSER GENERAL PUBLIC
     LICENSE as published by the Free Software Foundation under
     version 3 of the License

     This software is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     LESSER GENERAL PUBLIC LICENSE v.3 for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the
     Free Software Foundation, Inc., 59 Temple Place - Suite 330,
     Boston, MA 02111-1307, USA.

-->

<mx:HDividedBox 
    width="100%" height="100%"
    horizontalGap="10"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    verticalGap="0"
    initialize="onInitialize()"
    implements="net.undf.abicloud.view.main.IBodyComponentChildren"
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:utils="net.undf.abicloud.utils.*"
    xmlns:general="net.undf.abicloud.view.general.*"
    xmlns:enterprise="net.undf.abicloud.view.user.components.enterprise.*" xmlns:user="net.undf.abicloud.view.user.components.user.*">

    <mx:Script>
        <![CDATA[
        	import net.undf.abicloud.vo.user.PrivilegeType;
        	import net.undf.abicloud.utils.SecuredPrivilegeAccess;
        	import net.undf.abicloud.vo.user.User;
        	import net.undf.abicloud.view.user.components.user.UserList;
            import mx.collections.ArrayCollection;
            import mx.containers.Canvas;
            import mx.controls.Alert;
            import mx.effects.Resize;
            import mx.events.CloseEvent;
            import mx.events.EffectEvent;
            import mx.managers.PopUpManager;
            import mx.resources.ResourceBundle;
            import mx.resources.ResourceManager;
            import mx.utils.ObjectUtil;

            import net.undf.abicloud.business.managers.CountdownManager;
            import net.undf.abicloud.events.VirtualApplianceEvent;
            import net.undf.abicloud.model.AbiCloudModel;
            import net.undf.abicloud.view.general.AbiCloudAlert;
            import net.undf.abicloud.view.virtualappliance.components.virtualappliance.VirtualApplianceForm;
            import net.undf.abicloud.view.virtualappliance.components.virtualappliance.VirtualApplianceList;
            import net.undf.abicloud.vo.infrastructure.State;
            import net.undf.abicloud.vo.virtualappliance.VirtualAppliance;


            [ResourceBundle("Common")]
            private var rb:ResourceBundle;

            [ResourceBundle("VirtualAppliance")]
            private var rb2:ResourceBundle;

            //Pop Ups
           // private var _virtualApplianceForm:VirtualApplianceForm;

            
            [Bindable]
            private var userList:UserList;

            /////////////////////////////////////
            //IBodyComponentChildren implementation (in progress...)

            public function cleanView():void
            {
                //Cleaning this component everytime it is shown
                userList.hideMoreInfoContainer();
                userToggledContainer.selectedIndex = 0;

                userList.init();

            }
            
             public function willHide():void
            {

            }
            
             public function willShow():void
            {
                //Cleaning the view everytime this component is shown
                userList.hideMoreInfoContainer();

                userList.init();

                enterpriseSelector.init();
            }

            /////////// END IBodyComponentChildren implementation ////////////////

            override protected function createChildren():void
            {
                super.createChildren();


                //CREATING VIRTUAL INFRASTRUCTURE SECTIONS

                //VirtualApplianceList, for VirtualAppliances management
                userList = new UserList();
                userList.addEventListener("selectedUserChange",onUserSelected);             

                //ADDING VIRTUAL INFRASTRUCTURE SECTIONS
                userToggledContainer.addContent(userList, ResourceManager.getInstance().getString("Main", "HEADER_MENU_USER"));
              }

            private function onInitialize():void
            {
                //Check privilege
                if(!SecuredPrivilegeAccess.userHasPrivilege(PrivilegeType.USERS_MANAGE_OTHER_ENTERPRISES)
                && !SecuredPrivilegeAccess.userHasPrivilege(PrivilegeType.USERS_MANAGE_ENTERPRISE)){
                    SecuredPrivilegeAccess.checkElementAccess(PrivilegeType.USERS_MANAGE_OTHER_ENTERPRISES,"removeChild",enterprisePanel,this);
                }
                                
                
                //Listening for changes in model related to VirtualAppliances
               	userToggledContainer.selectedIndex = 0;
            }

           

            private function onUserSelected(event:Event = null):void
            {
                if (userList.selectedUser)
                    userList.showUser(userList.selectedUser);
                else
                    userList.hideMoreInfoContainer();
            }
            
            /////////////////////////////////////
            //Enterprises
            /**
             * When users clicks in enterprises list
             */
            protected function onSelectedEnterpriseChange():void
            {
                userList.hideMoreInfoContainer();

                //Filter the user list by enterprise
                userList.enterprise = enterpriseSelector.selectedEnterprise;
            }
            
        ]]>
    </mx:Script>

    <!-- Enterprises list -->
    <general:GeneralPanel
    	id="enterprisePanel" 
        width="200" height="100%"
        title="@Resource(bundle='User', key='LABEL_ENTERPRISES')">

        <enterprise:SecurableEnterpriseSelector id="enterpriseSelector"
            width="100%" height="100%"
            selectedEnterpriseChange="onSelectedEnterpriseChange()"/>
    </general:GeneralPanel>

    <!-- Users container -->        

    <general:GeneralPanel id="usersContainer"
        width="100%" height="100%"
        creationPolicy="all"
        title="{enterpriseSelector.selectedEnterprise ? enterpriseSelector.selectedEnterprise.name.toUpperCase() :
						  															ResourceManager.getInstance().getString('VirtualAppliance', 'LABEL_ALL').toUpperCase()}">

        <mx:Canvas 
            width="100%" height="100%"
            styleName="VirtualDataCenterManagementBaseCanvas1">
            <general:GeneralToggledContainer id="userToggledContainer"
                x="0" y="0"
                left="5" right="5" top="5" bottom="5"/>
        </mx:Canvas>

    </general:GeneralPanel>

</mx:HDividedBox>
