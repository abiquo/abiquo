<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 16-oct-2008 16:52:14 by Hibernate Tools 3.2.1.GA -->
<hibernate-mapping>
    <!-- VirtualappHB
        This entity does not include the list of nodes
        Useful to retrieve a list of Virtual Appliance, when the nodes list may not be necessary
        Better performance -->
    <class catalog="kinton" entity-name="VirtualappHB" name="com.abiquo.abiserver.business.hibernate.pojohb.virtualappliance.VirtualappHB" table="virtualapp">
        <id name="idVirtualApp" type="java.lang.Integer">
            <column name="idVirtualApp" />
            <generator class="identity" />
        </id>
        <many-to-one class="com.abiquo.abiserver.business.hibernate.pojohb.virtualappliance.VirtualDataCenterHB" lazy="false" fetch="select" name="virtualDataCenterHB">
            <column name="idVirtualDataCenter" not-null="true" />
        </many-to-one>
        <many-to-one class="com.abiquo.abiserver.business.hibernate.pojohb.user.EnterpriseHB" lazy="false" fetch="select" name="enterpriseHB">
            <column name="idEnterprise" not-null="false" />
        </many-to-one>
        <property name="name" type="string">
            <column length="30" name="name" not-null="true" />
        </property>
        <property name="state" type="State">
            <formula>( select case when not exists ( select virtualmac20_.idVM from virtualapp virtualapp17_ inner join node nodesvirtu18_ on virtualapp17_.idVirtualApp=nodesvirtu18_.idVirtualApp
                inner join nodevirtualimage nodevirtua19_ inner join node nodevirtua19_1_ on nodevirtua19_.idNode=nodevirtua19_1_.idNode inner join virtualmachine virtualmac20_ on
                nodevirtua19_.idVM=virtualmac20_.idVM where virtualapp17_.idVirtualApp=virtualapp0_.idVirtualApp and nodesvirtu18_.idNode=nodevirtua19_.idNode ) then 'NOT_DEPLOYED' when exists (
                select virtualmac4_.state from virtualapp virtualapp1_ inner join node nodesvirtu2_ on virtualapp1_.idVirtualApp=nodesvirtu2_.idVirtualApp inner join nodevirtualimage nodevirtua3_
                inner join node nodevirtua3_1_ on nodevirtua3_.idNode=nodevirtua3_1_.idNode inner join virtualmachine virtualmac4_ on nodevirtua3_.idVM=virtualmac4_.idVM where
                virtualapp1_.idVirtualApp=virtualapp0_.idVirtualApp and nodesvirtu2_.idNode=nodevirtua3_.idNode and virtualmac4_.state='UNKNOWN' ) then 'UNKNOWN' when exists ( select
                virtualmac8_.state from virtualapp virtualapp5_ inner join node nodesvirtu6_ on virtualapp5_.idVirtualApp=nodesvirtu6_.idVirtualApp inner join nodevirtualimage nodevirtua7_ inner join
                node nodevirtua7_1_ on nodevirtua7_.idNode=nodevirtua7_1_.idNode inner join virtualmachine virtualmac8_ on nodevirtua7_.idVM=virtualmac8_.idVM where
                virtualapp5_.idVirtualApp=virtualapp0_.idVirtualApp and nodesvirtu6_.idNode=nodevirtua7_.idNode and virtualmac8_.state='LOCKED' ) then 'LOCKED' when not exists ( select
                virtualmac12_.state from virtualapp virtualapp9_ inner join node nodesvirtu10_ on virtualapp9_.idVirtualApp=nodesvirtu10_.idVirtualApp inner join nodevirtualimage nodevirtua11_ inner
                join node nodevirtua11_1_ on nodevirtua11_.idNode=nodevirtua11_1_.idNode inner join virtualmachine virtualmac12_ on nodevirtua11_.idVM=virtualmac12_.idVM where
                virtualapp9_.idVirtualApp=virtualapp0_.idVirtualApp and nodesvirtu10_.idNode=nodevirtua11_.idNode and ( virtualmac12_.state not in ('OFF' , 'PAUSED' , 'ON') ) ) then 'DEPLOYED' when
                not exists ( select virtualmac16_.state from virtualapp virtualapp13_ inner join node nodesvirtu14_ on virtualapp13_.idVirtualApp=nodesvirtu14_.idVirtualApp inner join nodevirtualimage
                nodevirtua15_ inner join node nodevirtua15_1_ on nodevirtua15_.idNode=nodevirtua15_1_.idNode inner join virtualmachine virtualmac16_ on nodevirtua15_.idVM=virtualmac16_.idVM where
                virtualapp13_.idVirtualApp=virtualapp0_.idVirtualApp and nodesvirtu14_.idNode=nodevirtua15_.idNode and ( virtualmac16_.state not in ( 'NOT_ALLOCATED' , 'ALLOCATED')) ) then
                'NOT_DEPLOYED' else 'NEEDS_SYNC' end)</formula>
        </property>
        <property name="public_" type="int">
            <column name="public" not-null="true">
                <comment>0-No 1-Yes</comment>
            </column>
        </property>
        <property name="highDisponibility" type="int">
            <column name="high_disponibility" not-null="true">
                <comment>0-No 1-Yes</comment>
            </column>
        </property>
        <property name="error" type="int">
            <column name="error" not-null="true">
                <comment>0-No 1-Yes</comment>
            </column>
        </property>
        <property name="nodeConnections" type="string">
            <column name="nodeconnections" not-null="false" />
        </property>
    </class>
    <!-- VirtualappExtendedHB
        Same fields than VirtualappHB, with the addition of the nodes list
        Use this entity to retrieve only once Virtual Appliance at the same time
        Not recommended to retrieve a list of Virtual Appliances -->
    <class catalog="kinton" entity-name="VirtualappExtendedHB" name="com.abiquo.abiserver.business.hibernate.pojohb.virtualappliance.VirtualappHB" table="virtualapp">
        <id name="idVirtualApp" type="java.lang.Integer">
            <column name="idVirtualApp" />
            <generator class="identity" />
        </id>
        <many-to-one class="com.abiquo.abiserver.business.hibernate.pojohb.virtualappliance.VirtualDataCenterHB" fetch="select" lazy="false" name="virtualDataCenterHB">
            <column name="idVirtualDataCenter" not-null="true" />
        </many-to-one>
        <many-to-one class="com.abiquo.abiserver.business.hibernate.pojohb.user.EnterpriseHB" lazy="false" fetch="select" name="enterpriseHB">
            <column name="idEnterprise" not-null="false" />
        </many-to-one>
        <property name="state" type="State">
            <formula>( select case when not exists ( select virtualmac20_.idVM from virtualapp virtualapp17_ inner join node nodesvirtu18_ on virtualapp17_.idVirtualApp=nodesvirtu18_.idVirtualApp
                inner join nodevirtualimage nodevirtua19_ inner join node nodevirtua19_1_ on nodevirtua19_.idNode=nodevirtua19_1_.idNode inner join virtualmachine virtualmac20_ on
                nodevirtua19_.idVM=virtualmac20_.idVM where virtualapp17_.idVirtualApp=virtualapp0_.idVirtualApp and nodesvirtu18_.idNode=nodevirtua19_.idNode ) then 'NOT_DEPLOYED' when exists (
                select virtualmac4_.state from virtualapp virtualapp1_ inner join node nodesvirtu2_ on virtualapp1_.idVirtualApp=nodesvirtu2_.idVirtualApp inner join nodevirtualimage nodevirtua3_
                inner join node nodevirtua3_1_ on nodevirtua3_.idNode=nodevirtua3_1_.idNode inner join virtualmachine virtualmac4_ on nodevirtua3_.idVM=virtualmac4_.idVM where
                virtualapp1_.idVirtualApp=virtualapp0_.idVirtualApp and nodesvirtu2_.idNode=nodevirtua3_.idNode and virtualmac4_.state='UNKNOWN' ) then 'UNKNOWN' when exists ( select
                virtualmac8_.state from virtualapp virtualapp5_ inner join node nodesvirtu6_ on virtualapp5_.idVirtualApp=nodesvirtu6_.idVirtualApp inner join nodevirtualimage nodevirtua7_ inner join
                node nodevirtua7_1_ on nodevirtua7_.idNode=nodevirtua7_1_.idNode inner join virtualmachine virtualmac8_ on nodevirtua7_.idVM=virtualmac8_.idVM where
                virtualapp5_.idVirtualApp=virtualapp0_.idVirtualApp and nodesvirtu6_.idNode=nodevirtua7_.idNode and virtualmac8_.state='LOCKED' ) then 'LOCKED' when not exists ( select
                virtualmac12_.state from virtualapp virtualapp9_ inner join node nodesvirtu10_ on virtualapp9_.idVirtualApp=nodesvirtu10_.idVirtualApp inner join nodevirtualimage nodevirtua11_ inner
                join node nodevirtua11_1_ on nodevirtua11_.idNode=nodevirtua11_1_.idNode inner join virtualmachine virtualmac12_ on nodevirtua11_.idVM=virtualmac12_.idVM where
                virtualapp9_.idVirtualApp=virtualapp0_.idVirtualApp and nodesvirtu10_.idNode=nodevirtua11_.idNode and ( virtualmac12_.state not in ('OFF' , 'PAUSED' , 'ON') ) ) then 'DEPLOYED' when
                not exists ( select virtualmac16_.state from virtualapp virtualapp13_ inner join node nodesvirtu14_ on virtualapp13_.idVirtualApp=nodesvirtu14_.idVirtualApp inner join nodevirtualimage
                nodevirtua15_ inner join node nodevirtua15_1_ on nodevirtua15_.idNode=nodevirtua15_1_.idNode inner join virtualmachine virtualmac16_ on nodevirtua15_.idVM=virtualmac16_.idVM where
                virtualapp13_.idVirtualApp=virtualapp0_.idVirtualApp and nodesvirtu14_.idNode=nodevirtua15_.idNode and ( virtualmac16_.state not in ( 'NOT_ALLOCATED' , 'ALLOCATED')) ) then
                'NOT_DEPLOYED' else 'NEEDS_SYNC' end)</formula>
        </property>
        <property name="name" type="string">
            <column length="30" name="name" not-null="true" />
        </property>
        <property name="public_" type="int">
            <column name="public" not-null="true">
                <comment>0-No 1-Yes</comment>
            </column>
        </property>
        <property name="highDisponibility" type="int">
            <column name="high_disponibility" not-null="true">
                <comment>0-No 1-Yes</comment>
            </column>
        </property>
        <property name="error" type="int">
            <column name="error" not-null="true">
                <comment>0-No 1-Yes</comment>
            </column>
        </property>
        <property name="nodeConnections" type="string">
            <column name="nodeconnections" not-null="false" />
        </property>
        <set inverse="true" lazy="false" name="nodesHB" order-by="name" cascade="all">
            <key>
                <column name="idVirtualApp" not-null="true" />
            </key>
            <one-to-many class="com.abiquo.abiserver.business.hibernate.pojohb.virtualappliance.NodeHB" />
        </set>
    </class>
    <!-- NAMED QUERIES -->
    <query name="FIND_BY_USED_VIRTUAL_IMAGE"> SELECT va FROM VirtualappExtendedHB as va inner join va.nodesHB as n, com.abiquo.abiserver.business.hibernate.pojohb.virtualappliance.NodeVirtualImageHB as nvi inner join
        nvi.virtualImageHB as vi WHERE n.type=:type AND nvi.idNode=n.idNode AND vi.idImage=:usedVIId
    </query>
    <query name="FIND_BY_USED_VIRTUAL_IMAGE_ON_REPOSITORY"> SELECT va FROM VirtualappExtendedHB as va inner join va.nodesHB as n, com.abiquo.abiserver.business.hibernate.pojohb.virtualappliance.NodeVirtualImageHB as nvi inner join
        nvi.virtualImageHB as vi WHERE n.type=:type AND nvi.idNode=n.idNode AND vi.repository.idRepository=:idRepo
    </query>
    <query name="VIRTUAL_APPLIANCE_BY_VIRTUAL_MACHINE_ID"> Select vapp from VirtualappExtendedHB vapp, com.abiquo.abiserver.business.hibernate.pojohb.virtualappliance.NodeVirtualImageHB node,
        com.abiquo.abiserver.business.hibernate.pojohb.virtualappliance.VirtualmachineHB vm where vm.idVm = :vmId and vm.idVm = node.virtualMachineHB.idVm and node.idVirtualApp = vapp.idVirtualApp
    </query>
    <query name="VIRTUAL_APPLIANCES_BY_ENTERPRISE"> from VirtualappHB app where app.enterpriseHB.idEnterprise = :enterpriseId order by app.name asc
    </query>
    <query name="VIRTUAL_APPLIANCES_BY_ENTERPRISE_AND_DATACENTER"> from VirtualappHB app where app.enterpriseHB.idEnterprise = :enterpriseId and app.virtualDataCenterHB.idDataCenter = :datacenterId order by app.name asc
    </query>
    <query name="VIRTUAL_DATACENTER_ID_BY_VIRTUAL_APP_ID"> SELECT vapp.virtualDataCenterHB.idVirtualDataCenter FROM VirtualappHB vapp WHERE vapp.idVirtualApp = :idVirtualApp
    </query>
    <query name="VIRTUAL_APPLIANCE_BY_ENTERPRISE_AND_DC_TINY"> select va.id, va.name, va.highDisponibility, va.state, va.error, va.public_, va.nodeConnections, vdc.idVirtualDataCenter, vdc.name, vdc.idDataCenter, vdc.hypervisorType from
        VirtualappHB va inner join va.virtualDataCenterHB as vdc where va.enterpriseHB.idEnterprise = :enterpriseId and vdc.idDataCenter = :datacenterId order by va.name asc
    </query>
    <query name="VIRTUAL_APPLIANCE_BY_ENTERPRISE_AND_DC_TINY_WITH_RESTRICTIONS"> select va.id, va.name, va.highDisponibility, va.state, va.error, va.public_, va.nodeConnections, vdc.idVirtualDataCenter, vdc.name, vdc.idDataCenter, vdc.hypervisorType from
        VirtualappHB va inner join va.virtualDataCenterHB as vdc where va.enterpriseHB.idEnterprise = :enterpriseId and vdc.idDataCenter = :datacenterId and vdc.idVirtualDataCenter in (:vdcs) order by
        va.name asc
    </query>
    <query name="VIRTUAL_APPLIANCE_BY_ENTERPRISE_TINY"> select va.id, va.name, va.highDisponibility, va.state, va.error, va.public_, va.nodeConnections, vdc.idVirtualDataCenter, vdc.name, vdc.idDataCenter, vdc.hypervisorType from
        VirtualappHB va inner join va.virtualDataCenterHB as vdc where va.enterpriseHB.idEnterprise = :enterpriseId order by va.name asc
    </query>
    <query name="VIRTUAL_APPLIANCE_BY_ENTERPRISE_TINY_WITH_RESTRICTIONS"> select va.id, va.name, va.highDisponibility, va.state, va.error, va.public_, va.nodeConnections, vdc.idVirtualDataCenter, vdc.name, vdc.idDataCenter, vdc.hypervisorType from
        VirtualappHB va inner join va.virtualDataCenterHB as vdc where va.enterpriseHB.idEnterprise = :enterpriseId and vdc.idVirtualDataCenter in (:vdcs) order by va.name asc
    </query>
    <!--
        <query name="VIRTUAL_DATACENTER_ID_BY_VIRTUAL_APP_ID">
        Select vdc.idVirtualDataCenter
        FROM virtualapp va, virtualdatacenter vdc
        WHERE va.idVirtualDataCenter = vdc.idVirtualDataCenter AND va.idVirtualApp =:idVirtualApp
        </query>
    -->
</hibernate-mapping>